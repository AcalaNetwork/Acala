name: Tests Coverage

on:
  workflow_dispatch:
  pull_request:
    branches:
      - master
    paths-ignore:
      - '**/README.md'
  push:
    branches:
      - master
    paths-ignore:
      - '**/README.md'

env:
  TARPAULIN_VERSION: 0.18.5
  # LIBCLANG_PATH: "/usr/lib/llvm-11/lib" # default `llvm-config --prefix`
  # SCCACHE_CACHE_SIZE: "100G"
  CARGO_INCREMENTAL: 0
jobs:
  clean-up-actions:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        # Only cancel non-master branch runs
        if: ${{ github.ref != 'refs/heads/master' }}
        uses: styfle/cancel-workflow-action@0.9.0
        with:
          access_token: ${{ github.token }}
  test:
    name: Coverage Report
    runs-on: [self-hosted, linux]
    needs: clean-up-actions
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2021-11-07
          components: rustfmt
          target: wasm32-unknown-unknown
          default: true
      # - name: Install additional dependencies
      #   run: |
      #       sudo apt update -y &&
      #       sudo apt install -y cmake pkg-config libssl-dev git gcc build-essential git clang libclang-dev
      - name: Run cargo-tarpaulin
        uses: actions-rs/tarpaulin@v0.1
        with:
          version: ${{ env.TARPAULIN_VERSION }}
          timeout: 900
          out-type: Xml
          args: '--avoid-cfg-tarpaulin --no-fail-fast --workspace
            -e acala-inspect
            acala acala-cli e2e-tests acala-service
            acala-primitives
            acala-rpc
            acala-runtime runtime-common runtime-integration-tests karura-runtime mandala-runtime
            test-service
            --exclude-files */mock.rs */weights.rs'
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v2
        with:
          fail_ci_if_error: true # optional (default = false)
          verbose: true # optional (default = false)
