// This file is part of Acala.

// Copyright (C) 2020-2021 Acala Foundation.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for module_homa_lite
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-10-28, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// target/release/acala
// benchmark
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=module_homa_lite
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./modules/homa-lite/src/weights.rs
// --template=./templates/module-weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for module_homa_lite.
pub trait WeightInfo {
	fn on_idle() -> Weight;
	fn on_initialize() -> Weight;
	fn mint() -> Weight;
	fn mint_for_requests() -> Weight;
	fn set_total_staking_currency() -> Weight;
	fn adjust_total_staking_currency() -> Weight;
	fn set_minting_cap() -> Weight;
	fn set_xcm_dest_weight() -> Weight;
	fn request_redeem() -> Weight;
	fn schedule_unbond() -> Weight;
	fn replace_schedule_unbond() -> Weight;
	fn set_staking_interest_rate_per_update() -> Weight;
}

/// Weights for module_homa_lite using the Acala node and recommended hardware.
pub struct AcalaWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for AcalaWeight<T> {
	fn on_idle() -> Weight {
		(463_757_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(23 as Weight))
			.saturating_add(T::DbWeight::get().writes(18 as Weight))
	}
	fn on_initialize() -> Weight {
		(20_641_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn mint() -> Weight {
		(249_560_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(14 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	fn mint_for_requests() -> Weight {
		(628_871_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(30 as Weight))
			.saturating_add(T::DbWeight::get().writes(21 as Weight))
	}
	fn set_total_staking_currency() -> Weight {
		(19_059_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn adjust_total_staking_currency() -> Weight {
		(21_797_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn set_minting_cap() -> Weight {
		(19_578_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn set_xcm_dest_weight() -> Weight {
		(18_928_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn request_redeem() -> Weight {
		(152_142_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn schedule_unbond() -> Weight {
		(23_344_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn replace_schedule_unbond() -> Weight {
		(20_300_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn set_staking_interest_rate_per_update() -> Weight {
		(19_059_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn on_idle() -> Weight {
		(463_757_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(23 as Weight))
			.saturating_add(RocksDbWeight::get().writes(18 as Weight))
	}
	fn on_initialize() -> Weight {
		(20_641_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn mint() -> Weight {
		(249_560_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(14 as Weight))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
	}
	fn mint_for_requests() -> Weight {
		(628_871_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(30 as Weight))
			.saturating_add(RocksDbWeight::get().writes(21 as Weight))
	}
	fn set_total_staking_currency() -> Weight {
		(19_059_000 as Weight)
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn adjust_total_staking_currency() -> Weight {
		(21_797_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn set_minting_cap() -> Weight {
		(19_578_000 as Weight)
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn set_xcm_dest_weight() -> Weight {
		(18_928_000 as Weight)
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn request_redeem() -> Weight {
		(152_142_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn schedule_unbond() -> Weight {
		(23_344_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn replace_schedule_unbond() -> Weight {
		(20_300_000 as Weight)
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn set_staking_interest_rate_per_update() -> Weight {
		(19_059_000 as Weight)
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
}
