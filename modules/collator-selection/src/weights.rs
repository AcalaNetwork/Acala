// This file is part of Acala.

// Copyright (C) 2020-2022 Acala Foundation.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for module_collator_selection
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-07-15, STEPS: `[50, ]`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// target/release/acala
// benchmark
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=module_collator_selection
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./modules/collator-selection/src/weights.rs
// --template=./templates/module-weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for module_collator_selection.
pub trait WeightInfo {
	fn set_invulnerables(b: u32, ) -> Weight;
	fn set_desired_candidates() -> Weight;
	fn set_candidacy_bond() -> Weight;
	fn register_as_candidate(c: u32, ) -> Weight;
	fn register_candidate(c: u32, ) -> Weight;
	fn leave_intent(c: u32, ) -> Weight;
	fn withdraw_bond() -> Weight;
	fn note_author() -> Weight;
	fn new_session() -> Weight;
	fn start_session(r: u32, c: u32, ) -> Weight;
	fn end_session(r: u32, c: u32, ) -> Weight;
}

/// Weights for module_collator_selection using the Acala node and recommended hardware.
pub struct AcalaWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for AcalaWeight<T> {
	fn set_invulnerables(b: u32, ) -> Weight {
		Weight::from_ref_time(19_583_000)
			// Standard Error: 1_000
			.saturating_add(Weight::from_ref_time(140_000).saturating_mul(b as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	fn set_desired_candidates() -> Weight {
		Weight::from_ref_time(16_810_000)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	fn set_candidacy_bond() -> Weight {
		Weight::from_ref_time(17_450_000)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	fn register_as_candidate(c: u32, ) -> Weight {
		Weight::from_ref_time(80_708_000)
			// Standard Error: 0
			.saturating_add(Weight::from_ref_time(295_000).saturating_mul(c as u64))
			.saturating_add(T::DbWeight::get().reads(7 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	fn register_candidate(c: u32, ) -> Weight {
		Weight::from_ref_time(44_267_000)
			// Standard Error: 0
			.saturating_add(Weight::from_ref_time(293_000).saturating_mul(c as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	fn leave_intent(c: u32, ) -> Weight {
		Weight::from_ref_time(30_866_000)
			// Standard Error: 0
			.saturating_add(Weight::from_ref_time(282_000).saturating_mul(c as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	fn withdraw_bond() -> Weight {
		Weight::from_ref_time(57_918_000)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	fn note_author() -> Weight {
		Weight::from_ref_time(60_838_000)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	fn new_session() -> Weight {
		Weight::from_ref_time(65_197_000)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	fn start_session(_r: u32, c: u32, ) -> Weight {
		Weight::from_ref_time(13_649_000)
			// Standard Error: 2_000
			.saturating_add(Weight::from_ref_time(2_986_000).saturating_mul(c as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(c as u64)))
	}
	fn end_session(_r: u32, c: u32, ) -> Weight {
		Weight::from_ref_time(8_892_726_000)
			// Standard Error: 161_000
			.saturating_add(Weight::from_ref_time(11_841_000).saturating_mul(c as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(c as u64)))
			.saturating_add(T::DbWeight::get().writes(199 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(c as u64)))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn set_invulnerables(b: u32, ) -> Weight {
		Weight::from_ref_time(19_583_000)
			// Standard Error: 1_000
			.saturating_add(Weight::from_ref_time(140_000).saturating_mul(b as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	fn set_desired_candidates() -> Weight {
		Weight::from_ref_time(16_810_000)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	fn set_candidacy_bond() -> Weight {
		Weight::from_ref_time(17_450_000)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	fn register_as_candidate(c: u32, ) -> Weight {
		Weight::from_ref_time(80_708_000)
			// Standard Error: 0
			.saturating_add(Weight::from_ref_time(295_000).saturating_mul(c as u64))
			.saturating_add(RocksDbWeight::get().reads(7 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	fn register_candidate(c: u32, ) -> Weight {
		Weight::from_ref_time(44_267_000)
			// Standard Error: 0
			.saturating_add(Weight::from_ref_time(293_000).saturating_mul(c as u64))
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	fn leave_intent(c: u32, ) -> Weight {
		Weight::from_ref_time(30_866_000)
			// Standard Error: 0
			.saturating_add(Weight::from_ref_time(282_000).saturating_mul(c as u64))
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	fn withdraw_bond() -> Weight {
		Weight::from_ref_time(57_918_000)
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	fn note_author() -> Weight {
		Weight::from_ref_time(60_838_000)
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	fn new_session() -> Weight {
		Weight::from_ref_time(65_197_000)
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	fn start_session(_r: u32, c: u32, ) -> Weight {
		Weight::from_ref_time(13_649_000)
			// Standard Error: 2_000
			.saturating_add(Weight::from_ref_time(2_986_000).saturating_mul(c as u64))
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
			.saturating_add(RocksDbWeight::get().writes((1 as u64).saturating_mul(c as u64)))
	}
	fn end_session(_r: u32, c: u32, ) -> Weight {
		Weight::from_ref_time(8_892_726_000)
			// Standard Error: 161_000
			.saturating_add(Weight::from_ref_time(11_841_000).saturating_mul(c as u64))
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(c as u64)))
			.saturating_add(RocksDbWeight::get().writes(199 as u64))
			.saturating_add(RocksDbWeight::get().writes((1 as u64).saturating_mul(c as u64)))
	}
}
