// This file is part of Acala.

// Copyright (C) 2020-2023 Acala Foundation.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for orml_authority
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-15, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ip-172-31-35-209`, CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("karura-dev"), DB CACHE: 1024

// Executed Command:
// target/production/acala
// benchmark
// pallet
// --chain=karura-dev
// --steps=50
// --repeat=20
// --pallet=*
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./templates/runtime-weight-template.hbs
// --output=./runtime/karura/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for orml_authority.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> orml_authority::WeightInfo for WeightInfo<T> {
	fn dispatch_as() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `964`
		//  Estimated: `0`
		// Minimum execution time: 16_750 nanoseconds.
		Weight::from_parts(17_299_000, 0)
	}
	// Storage: Authority NextTaskIndex (r:1 w:1)
	// Proof Skipped: Authority NextTaskIndex (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Scheduler Lookup (r:1 w:1)
	// Proof: Scheduler Lookup (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: Scheduler Agenda (r:1 w:1)
	// Proof: Scheduler Agenda (max_values: None, max_size: Some(7853), added: 10328, mode: MaxEncodedLen)
	fn schedule_dispatch_without_delay() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1110`
		//  Estimated: `17426`
		// Minimum execution time: 31_600 nanoseconds.
		Weight::from_parts(32_338_000, 17426)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Authority NextTaskIndex (r:1 w:1)
	// Proof Skipped: Authority NextTaskIndex (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Scheduler Lookup (r:1 w:1)
	// Proof: Scheduler Lookup (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: Scheduler Agenda (r:1 w:1)
	// Proof: Scheduler Agenda (max_values: None, max_size: Some(7853), added: 10328, mode: MaxEncodedLen)
	fn schedule_dispatch_with_delay() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1110`
		//  Estimated: `17426`
		// Minimum execution time: 32_590 nanoseconds.
		Weight::from_parts(33_390_000, 17426)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Scheduler Lookup (r:1 w:1)
	// Proof: Scheduler Lookup (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: Scheduler Agenda (r:2 w:2)
	// Proof: Scheduler Agenda (max_values: None, max_size: Some(7853), added: 10328, mode: MaxEncodedLen)
	fn fast_track_scheduled_dispatch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1187`
		//  Estimated: `25159`
		// Minimum execution time: 42_063 nanoseconds.
		Weight::from_parts(43_074_000, 25159)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Scheduler Lookup (r:1 w:1)
	// Proof: Scheduler Lookup (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: Scheduler Agenda (r:2 w:2)
	// Proof: Scheduler Agenda (max_values: None, max_size: Some(7853), added: 10328, mode: MaxEncodedLen)
	fn delay_scheduled_dispatch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1187`
		//  Estimated: `25159`
		// Minimum execution time: 41_887 nanoseconds.
		Weight::from_parts(43_083_000, 25159)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Scheduler Lookup (r:1 w:1)
	// Proof: Scheduler Lookup (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: Scheduler Agenda (r:1 w:1)
	// Proof: Scheduler Agenda (max_values: None, max_size: Some(7853), added: 10328, mode: MaxEncodedLen)
	fn cancel_scheduled_dispatch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1187`
		//  Estimated: `14831`
		// Minimum execution time: 32_636 nanoseconds.
		Weight::from_parts(33_658_000, 14831)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Authority SavedCalls (r:0 w:1)
	// Proof Skipped: Authority SavedCalls (max_values: None, max_size: None, mode: Measured)
	fn authorize_call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `964`
		//  Estimated: `964`
		// Minimum execution time: 16_762 nanoseconds.
		Weight::from_parts(17_288_000, 964)
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Authority SavedCalls (r:1 w:1)
	// Proof Skipped: Authority SavedCalls (max_values: None, max_size: None, mode: Measured)
	fn remove_authorized_call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1305`
		//  Estimated: `4770`
		// Minimum execution time: 21_937 nanoseconds.
		Weight::from_parts(22_578_000, 4770)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Authority SavedCalls (r:1 w:1)
	// Proof Skipped: Authority SavedCalls (max_values: None, max_size: None, mode: Measured)
	fn trigger_call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1305`
		//  Estimated: `4770`
		// Minimum execution time: 28_122 nanoseconds.
		Weight::from_parts(28_545_000, 4770)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
