// This file is part of Acala.

// Copyright (C) 2020-2023 Acala Foundation.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for module_homa
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-12-20, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `187e78510d7a`, CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("karura-dev"), DB CACHE: 1024

// Executed Command:
// target/production/acala
// benchmark
// pallet
// --chain=karura-dev
// --steps=50
// --repeat=20
// --pallet=*
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./templates/runtime-weight-template.hbs
// --output=./runtime/karura/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for module_homa.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> module_homa::WeightInfo for WeightInfo<T> {
	// Storage: ParachainSystem ValidationData (r:1 w:0)
	// Storage: Homa LastEraBumpedBlock (r:1 w:0)
	// Storage: Homa BumpEraFrequency (r:1 w:0)
	fn on_initialize() -> Weight {
		// Minimum execution time: 5_733 nanoseconds.
		Weight::from_ref_time(5_949_000)
			.saturating_add(T::DbWeight::get().reads(3))
	}
	// Storage: ParachainSystem ValidationData (r:1 w:0)
	// Storage: Homa LastEraBumpedBlock (r:1 w:1)
	// Storage: Homa BumpEraFrequency (r:1 w:0)
	// Storage: Homa RelayChainCurrentEra (r:1 w:1)
	// Storage: Homa EstimatedRewardRatePerEra (r:1 w:0)
	// Storage: Homa StakingLedgers (r:4 w:2)
	// Storage: Homa TotalStakingBonded (r:1 w:1)
	// Storage: Homa CommissionRate (r:1 w:0)
	// Storage: Tokens TotalIssuance (r:2 w:2)
	// Storage: Tokens Accounts (r:3 w:3)
	// Storage: System Account (r:2 w:2)
	// Storage: XcmInterface XcmDestWeightAndFee (r:4 w:0)
	// Storage: ParachainInfo ParachainId (r:1 w:0)
	// Storage: PolkadotXcm SupportedVersion (r:1 w:0)
	// Storage: PolkadotXcm VersionDiscoveryQueue (r:1 w:1)
	// Storage: PolkadotXcm SafeXcmVersion (r:1 w:0)
	// Storage: ParachainSystem HostConfiguration (r:1 w:0)
	// Storage: ParachainSystem PendingUpwardMessages (r:1 w:1)
	// Storage: Homa UnclaimedRedemption (r:1 w:1)
	// Storage: Homa ToBondPool (r:1 w:1)
	// Storage: Homa SoftBondedCapPerSubAccount (r:1 w:0)
	// Storage: UnknownTokens ConcreteFungibleBalances (r:1 w:0)
	// Storage: Homa RedeemRequests (r:2 w:1)
	// Storage: Homa Unbondings (r:1 w:1)
	// Storage: Homa TotalVoidLiquid (r:0 w:1)
	fn on_initialize_with_bump_era() -> Weight {
		// Minimum execution time: 250_956 nanoseconds.
		Weight::from_ref_time(258_349_000)
			.saturating_add(T::DbWeight::get().reads(35))
			.saturating_add(T::DbWeight::get().writes(19))
	}
	// Storage: Homa TotalStakingBonded (r:1 w:0)
	// Storage: Homa ToBondPool (r:1 w:1)
	// Storage: Homa SoftBondedCapPerSubAccount (r:1 w:0)
	// Storage: Tokens Accounts (r:3 w:3)
	// Storage: System Account (r:1 w:1)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Storage: Homa TotalVoidLiquid (r:1 w:1)
	// Storage: Homa EstimatedRewardRatePerEra (r:1 w:0)
	fn mint() -> Weight {
		// Minimum execution time: 72_711 nanoseconds.
		Weight::from_ref_time(74_119_000)
			.saturating_add(T::DbWeight::get().reads(10))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	// Storage: Homa RedeemRequests (r:1 w:1)
	// Storage: Tokens Accounts (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	fn request_redeem() -> Weight {
		// Minimum execution time: 47_174 nanoseconds.
		Weight::from_ref_time(48_464_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: Homa RedeemRequests (r:1 w:1)
	// Storage: Homa ToBondPool (r:1 w:1)
	// Storage: Homa TotalStakingBonded (r:1 w:0)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Storage: Homa TotalVoidLiquid (r:1 w:0)
	// Storage: Homa FastMatchFeeRate (r:1 w:0)
	// Storage: Tokens Accounts (r:3 w:3)
	// Storage: System Account (r:2 w:2)
	/// The range of component `n` is `[1, 50]`.
	fn fast_match_redeems(n: u32, ) -> Weight {
		// Minimum execution time: 84_444 nanoseconds.
		Weight::from_ref_time(26_677_278)
			// Standard Error: 29_723
			.saturating_add(Weight::from_ref_time(50_072_510).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(5))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(n.into())))
	}
	// Storage: Homa RelayChainCurrentEra (r:1 w:0)
	// Storage: Homa Unbondings (r:2 w:1)
	// Storage: Homa UnclaimedRedemption (r:1 w:1)
	// Storage: Tokens Accounts (r:2 w:2)
	// Storage: System Account (r:2 w:2)
	// Storage: EvmAccounts EvmAddresses (r:1 w:0)
	fn claim_redemption() -> Weight {
		// Minimum execution time: 69_742 nanoseconds.
		Weight::from_ref_time(71_108_000)
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: Homa EstimatedRewardRatePerEra (r:1 w:1)
	// Storage: Homa CommissionRate (r:1 w:1)
	// Storage: Homa FastMatchFeeRate (r:1 w:1)
	// Storage: Homa SoftBondedCapPerSubAccount (r:0 w:1)
	fn update_homa_params() -> Weight {
		// Minimum execution time: 28_589 nanoseconds.
		Weight::from_ref_time(30_052_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: ParachainSystem ValidationData (r:1 w:0)
	// Storage: Homa LastEraBumpedBlock (r:0 w:1)
	// Storage: Homa BumpEraFrequency (r:0 w:1)
	fn update_bump_era_params() -> Weight {
		// Minimum execution time: 21_963 nanoseconds.
		Weight::from_ref_time(22_461_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Homa StakingLedgers (r:1 w:1)
	// Storage: Homa TotalStakingBonded (r:1 w:1)
	/// The range of component `n` is `[0, 10]`.
	fn reset_ledgers(n: u32, ) -> Weight {
		// Minimum execution time: 4_603 nanoseconds.
		Weight::from_ref_time(11_321_133)
			// Standard Error: 39_558
			.saturating_add(Weight::from_ref_time(8_511_712).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
	}
	// Storage: Homa RelayChainCurrentEra (r:1 w:1)
	fn reset_current_era() -> Weight {
		// Minimum execution time: 15_675 nanoseconds.
		Weight::from_ref_time(16_137_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
