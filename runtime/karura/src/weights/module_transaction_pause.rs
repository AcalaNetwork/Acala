// This file is part of Acala.

// Copyright (C) 2020-2024 Acala Foundation.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for module_transaction_pause
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 35.0.1
//! DATE: 2024-04-29, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ip-172-31-40-129`, CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! WASM-EXECUTION: Compiled, CHAIN: Some("karura-dev"), DB CACHE: 1024

// Executed Command:
// target/production/acala
// benchmark
// pallet
// --chain=karura-dev
// --steps=50
// --repeat=20
// --pallet=*
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./templates/runtime-weight-template.hbs
// --output=./runtime/karura/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for module_transaction_pause.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> module_transaction_pause::WeightInfo for WeightInfo<T> {
	// Storage: `TransactionPause::PausedTransactions` (r:1 w:1)
	// Proof: `TransactionPause::PausedTransactions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn pause_transaction() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1140`
		//  Estimated: `4605`
		// Minimum execution time: 15_018 nanoseconds.
		Weight::from_parts(15_473_000, 4605)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: `TransactionPause::PausedTransactions` (r:1 w:1)
	// Proof: `TransactionPause::PausedTransactions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn unpause_transaction() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1191`
		//  Estimated: `4656`
		// Minimum execution time: 16_335 nanoseconds.
		Weight::from_parts(16_978_000, 4656)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: `TransactionPause::PausedEvmPrecompiles` (r:1 w:1)
	// Proof: `TransactionPause::PausedEvmPrecompiles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn pause_evm_precompile() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1140`
		//  Estimated: `4605`
		// Minimum execution time: 15_059 nanoseconds.
		Weight::from_parts(15_343_000, 4605)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: `TransactionPause::PausedEvmPrecompiles` (r:1 w:1)
	// Proof: `TransactionPause::PausedEvmPrecompiles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn unpause_evm_precompile() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1201`
		//  Estimated: `4666`
		// Minimum execution time: 16_562 nanoseconds.
		Weight::from_parts(17_104_000, 4666)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
