// This file is part of Acala.

// Copyright (C) 2020-2024 Acala Foundation.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for module_asset_registry
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-02-21, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ip-172-31-26-6`, CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! WASM-EXECUTION: Compiled, CHAIN: Some("karura-dev"), DB CACHE: 1024

// Executed Command:
// target/production/acala
// benchmark
// pallet
// --chain=karura-dev
// --steps=50
// --repeat=20
// --pallet=*
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./templates/runtime-weight-template.hbs
// --output=./runtime/karura/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for module_asset_registry.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> module_asset_registry::WeightInfo for WeightInfo<T> {
	// Storage: `AssetRegistry::NextForeignAssetId` (r:1 w:1)
	// Proof: `AssetRegistry::NextForeignAssetId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `AssetRegistry::LocationToCurrencyIds` (r:1 w:1)
	// Proof: `AssetRegistry::LocationToCurrencyIds` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `AssetRegistry::ForeignAssetLocations` (r:1 w:1)
	// Proof: `AssetRegistry::ForeignAssetLocations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `AssetRegistry::AssetMetadatas` (r:1 w:1)
	// Proof: `AssetRegistry::AssetMetadatas` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register_foreign_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1107`
		//  Estimated: `4572`
		// Minimum execution time: 21_622 nanoseconds.
		Weight::from_parts(22_158_000, 4572)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: `AssetRegistry::ForeignAssetLocations` (r:1 w:1)
	// Proof: `AssetRegistry::ForeignAssetLocations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `AssetRegistry::AssetMetadatas` (r:1 w:1)
	// Proof: `AssetRegistry::AssetMetadatas` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_foreign_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1263`
		//  Estimated: `4728`
		// Minimum execution time: 22_247 nanoseconds.
		Weight::from_parts(22_903_000, 4728)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: `AssetRegistry::NextStableAssetId` (r:1 w:1)
	// Proof: `AssetRegistry::NextStableAssetId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `AssetRegistry::AssetMetadatas` (r:1 w:1)
	// Proof: `AssetRegistry::AssetMetadatas` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register_stable_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1107`
		//  Estimated: `4572`
		// Minimum execution time: 16_776 nanoseconds.
		Weight::from_parts(17_280_000, 4572)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: `AssetRegistry::AssetMetadatas` (r:1 w:1)
	// Proof: `AssetRegistry::AssetMetadatas` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_stable_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1201`
		//  Estimated: `4666`
		// Minimum execution time: 18_148 nanoseconds.
		Weight::from_parts(18_601_000, 4666)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: `EVM::Accounts` (r:2 w:0)
	// Proof: `EVM::Accounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `System::Digest` (r:1 w:0)
	// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EVM::Codes` (r:1 w:0)
	// Proof: `EVM::Codes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `EVM::AccountStorages` (r:5 w:0)
	// Proof: `EVM::AccountStorages` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `AssetRegistry::AssetMetadatas` (r:1 w:1)
	// Proof: `AssetRegistry::AssetMetadatas` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `AssetRegistry::Erc20IdToAddress` (r:1 w:1)
	// Proof: `AssetRegistry::Erc20IdToAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register_erc20_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6814`
		//  Estimated: `20179`
		// Minimum execution time: 199_476 nanoseconds.
		Weight::from_parts(202_794_000, 20179)
			.saturating_add(T::DbWeight::get().reads(11))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: `AssetRegistry::AssetMetadatas` (r:1 w:1)
	// Proof: `AssetRegistry::AssetMetadatas` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_erc20_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1352`
		//  Estimated: `4817`
		// Minimum execution time: 25_509 nanoseconds.
		Weight::from_parts(26_669_000, 4817)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: `AssetRegistry::AssetMetadatas` (r:1 w:1)
	// Proof: `AssetRegistry::AssetMetadatas` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register_native_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1107`
		//  Estimated: `4572`
		// Minimum execution time: 15_820 nanoseconds.
		Weight::from_parts(16_496_000, 4572)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: `AssetRegistry::AssetMetadatas` (r:1 w:1)
	// Proof: `AssetRegistry::AssetMetadatas` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_native_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1176`
		//  Estimated: `4641`
		// Minimum execution time: 17_368 nanoseconds.
		Weight::from_parts(17_810_000, 4641)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
