// This file is part of Acala.

// Copyright (C) 2020-2023 Acala Foundation.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for module_asset_registry
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-15, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ip-172-31-35-209`, CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("karura-dev"), DB CACHE: 1024

// Executed Command:
// target/production/acala
// benchmark
// pallet
// --chain=karura-dev
// --steps=50
// --repeat=20
// --pallet=*
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./templates/runtime-weight-template.hbs
// --output=./runtime/karura/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for module_asset_registry.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> module_asset_registry::WeightInfo for WeightInfo<T> {
	// Storage: AssetRegistry NextForeignAssetId (r:1 w:1)
	// Proof Skipped: AssetRegistry NextForeignAssetId (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: AssetRegistry LocationToCurrencyIds (r:1 w:1)
	// Proof Skipped: AssetRegistry LocationToCurrencyIds (max_values: None, max_size: None, mode: Measured)
	// Storage: AssetRegistry ForeignAssetLocations (r:1 w:1)
	// Proof Skipped: AssetRegistry ForeignAssetLocations (max_values: None, max_size: None, mode: Measured)
	// Storage: AssetRegistry AssetMetadatas (r:1 w:1)
	// Proof Skipped: AssetRegistry AssetMetadatas (max_values: None, max_size: None, mode: Measured)
	fn register_foreign_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1106`
		//  Estimated: `16304`
		// Minimum execution time: 28_257 nanoseconds.
		Weight::from_parts(29_234_000, 16304)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: AssetRegistry ForeignAssetLocations (r:1 w:1)
	// Proof Skipped: AssetRegistry ForeignAssetLocations (max_values: None, max_size: None, mode: Measured)
	// Storage: AssetRegistry AssetMetadatas (r:1 w:1)
	// Proof Skipped: AssetRegistry AssetMetadatas (max_values: None, max_size: None, mode: Measured)
	fn update_foreign_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1262`
		//  Estimated: `9454`
		// Minimum execution time: 27_891 nanoseconds.
		Weight::from_parts(28_625_000, 9454)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: AssetRegistry NextStableAssetId (r:1 w:1)
	// Proof Skipped: AssetRegistry NextStableAssetId (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: AssetRegistry AssetMetadatas (r:1 w:1)
	// Proof Skipped: AssetRegistry AssetMetadatas (max_values: None, max_size: None, mode: Measured)
	fn register_stable_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1106`
		//  Estimated: `7162`
		// Minimum execution time: 22_649 nanoseconds.
		Weight::from_parts(23_414_000, 7162)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: AssetRegistry AssetMetadatas (r:1 w:1)
	// Proof Skipped: AssetRegistry AssetMetadatas (max_values: None, max_size: None, mode: Measured)
	fn update_stable_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1200`
		//  Estimated: `4665`
		// Minimum execution time: 22_932 nanoseconds.
		Weight::from_parts(23_551_000, 4665)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: EVM Accounts (r:2 w:0)
	// Proof Skipped: EVM Accounts (max_values: None, max_size: None, mode: Measured)
	// Storage: EVM Codes (r:1 w:0)
	// Proof Skipped: EVM Codes (max_values: None, max_size: None, mode: Measured)
	// Storage: EVM AccountStorages (r:5 w:0)
	// Proof Skipped: EVM AccountStorages (max_values: None, max_size: None, mode: Measured)
	// Storage: AssetRegistry AssetMetadatas (r:1 w:1)
	// Proof Skipped: AssetRegistry AssetMetadatas (max_values: None, max_size: None, mode: Measured)
	// Storage: AssetRegistry Erc20IdToAddress (r:1 w:1)
	// Proof Skipped: AssetRegistry Erc20IdToAddress (max_values: None, max_size: None, mode: Measured)
	fn register_erc20_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6813`
		//  Estimated: `63765`
		// Minimum execution time: 203_492 nanoseconds.
		Weight::from_parts(206_860_000, 63765)
			.saturating_add(T::DbWeight::get().reads(10))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: AssetRegistry AssetMetadatas (r:1 w:1)
	// Proof Skipped: AssetRegistry AssetMetadatas (max_values: None, max_size: None, mode: Measured)
	fn update_erc20_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1351`
		//  Estimated: `4816`
		// Minimum execution time: 31_106 nanoseconds.
		Weight::from_parts(32_420_000, 4816)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: AssetRegistry AssetMetadatas (r:1 w:1)
	// Proof Skipped: AssetRegistry AssetMetadatas (max_values: None, max_size: None, mode: Measured)
	fn register_native_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1106`
		//  Estimated: `4571`
		// Minimum execution time: 21_192 nanoseconds.
		Weight::from_parts(21_596_000, 4571)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: AssetRegistry AssetMetadatas (r:1 w:1)
	// Proof Skipped: AssetRegistry AssetMetadatas (max_values: None, max_size: None, mode: Measured)
	fn update_native_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1175`
		//  Estimated: `4640`
		// Minimum execution time: 22_556 nanoseconds.
		Weight::from_parts(22_962_000, 4640)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
