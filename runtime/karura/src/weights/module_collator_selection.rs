// This file is part of Acala.

// Copyright (C) 2020-2022 Acala Foundation.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for module_collator_selection
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-08-12, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("karura-dev"), DB CACHE: 1024

// Executed Command:
// target/production/acala
// benchmark
// pallet
// --chain=karura-dev
// --steps=50
// --repeat=20
// --pallet=*
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./templates/runtime-weight-template.hbs
// --output=./runtime/karura/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for module_collator_selection.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> module_collator_selection::WeightInfo for WeightInfo<T> {
	// Storage: CollatorSelection Invulnerables (r:0 w:1)
	fn set_invulnerables(b: u32, ) -> Weight {
		Weight::from_ref_time(9_083_000)
			// Standard Error: 12_000
			.saturating_add(Weight::from_ref_time(60_000).saturating_mul(b as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: CollatorSelection DesiredCandidates (r:0 w:1)
	fn set_desired_candidates() -> Weight {
		Weight::from_ref_time(8_390_000)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: CollatorSelection CandidacyBond (r:0 w:1)
	fn set_candidacy_bond() -> Weight {
		Weight::from_ref_time(8_648_000)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: unknown [0x3a7472616e73616374696f6e5f6c6576656c3a] (r:1 w:1)
	// Storage: CollatorSelection NonCandidates (r:1 w:1)
	// Storage: CollatorSelection CandidacyBond (r:1 w:0)
	// Storage: CollatorSelection Candidates (r:1 w:1)
	// Storage: CollatorSelection DesiredCandidates (r:1 w:0)
	// Storage: CollatorSelection Invulnerables (r:1 w:0)
	// Storage: Session NextKeys (r:1 w:0)
	// Storage: Balances Reserves (r:1 w:1)
	fn register_as_candidate(c: u32, ) -> Weight {
		Weight::from_ref_time(46_380_000)
			// Standard Error: 4_000
			.saturating_add(Weight::from_ref_time(330_000).saturating_mul(c as u64))
			.saturating_add(T::DbWeight::get().reads(8 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: unknown [0x3a7472616e73616374696f6e5f6c6576656c3a] (r:1 w:1)
	// Storage: CollatorSelection Candidates (r:1 w:1)
	// Storage: CollatorSelection DesiredCandidates (r:1 w:0)
	// Storage: CollatorSelection Invulnerables (r:1 w:0)
	// Storage: Session NextKeys (r:1 w:0)
	// Storage: Balances Reserves (r:1 w:0)
	fn register_candidate(c: u32, ) -> Weight {
		Weight::from_ref_time(29_958_000)
			// Standard Error: 4_000
			.saturating_add(Weight::from_ref_time(297_000).saturating_mul(c as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: unknown [0x3a7472616e73616374696f6e5f6c6576656c3a] (r:1 w:1)
	// Storage: CollatorSelection Candidates (r:1 w:1)
	// Storage: Session CurrentIndex (r:1 w:0)
	// Storage: CollatorSelection NonCandidates (r:0 w:1)
	fn leave_intent(c: u32, ) -> Weight {
		Weight::from_ref_time(21_894_000)
			// Standard Error: 5_000
			.saturating_add(Weight::from_ref_time(233_000).saturating_mul(c as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: unknown [0x3a7472616e73616374696f6e5f6c6576656c3a] (r:1 w:1)
	// Storage: CollatorSelection NonCandidates (r:1 w:1)
	// Storage: Session CurrentIndex (r:1 w:0)
	// Storage: Balances Reserves (r:1 w:1)
	fn withdraw_bond() -> Weight {
		Weight::from_ref_time(40_407_000)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:2 w:2)
	// Storage: CollatorSelection SessionPoints (r:1 w:0)
	// Storage: System BlockWeight (r:1 w:1)
	fn note_author() -> Weight {
		Weight::from_ref_time(34_145_000)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: CollatorSelection Candidates (r:1 w:0)
	// Storage: CollatorSelection Invulnerables (r:1 w:0)
	// Storage: System BlockWeight (r:1 w:1)
	fn new_session() -> Weight {
		Weight::from_ref_time(16_897_000)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Session Validators (r:1 w:0)
	// Storage: CollatorSelection Candidates (r:1 w:0)
	// Storage: System BlockWeight (r:1 w:1)
	// Storage: CollatorSelection SessionPoints (r:0 w:50)
	fn start_session(_r: u32, c: u32, ) -> Weight {
		Weight::from_ref_time(9_921_000)
			// Standard Error: 6_000
			.saturating_add(Weight::from_ref_time(1_015_000).saturating_mul(c as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(c as u64)))
	}
	// Storage: CollatorSelection SessionPoints (r:51 w:50)
	// Storage: CollatorSelection Candidates (r:1 w:1)
	// Storage: Session CurrentIndex (r:1 w:0)
	// Storage: System BlockWeight (r:1 w:1)
	// Storage: CollatorSelection NonCandidates (r:0 w:41)
	fn end_session(_r: u32, c: u32, ) -> Weight {
		Weight::from_ref_time(440_890_000)
			// Standard Error: 22_000
			.saturating_add(Weight::from_ref_time(5_843_000).saturating_mul(c as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(c as u64)))
			.saturating_add(T::DbWeight::get().writes(49 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(c as u64)))
	}
}
