// This file is part of Acala.

// Copyright (C) 2020-2024 Acala Foundation.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for module_nominees_election
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 35.0.1
//! DATE: 2024-04-29, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ip-172-31-38-126`, CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/production/acala
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=*
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./templates/runtime-weight-template.hbs
// --output=./runtime/mandala/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for module_nominees_election.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> module_nominees_election::WeightInfo for WeightInfo<T> {
	// Storage: `NomineesElection::Ledger` (r:1 w:1)
	// Proof: `NomineesElection::Ledger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(147), added: 2622, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Locks` (r:1 w:1)
	// Proof: `Tokens::Locks` (`max_values`: None, `max_size`: Some(1300), added: 3775, mode: `MaxEncodedLen`)
	// Storage: `NomineesElection::Nominations` (r:1 w:0)
	// Proof: `NomineesElection::Nominations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2426`
		//  Estimated: `5891`
		// Minimum execution time: 42_505 nanoseconds.
		Weight::from_parts(43_748_000, 5891)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: `NomineesElection::CurrentEra` (r:1 w:0)
	// Proof: `NomineesElection::CurrentEra` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `NomineesElection::Ledger` (r:1 w:1)
	// Proof: `NomineesElection::Ledger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Tokens::Locks` (r:1 w:1)
	// Proof: `Tokens::Locks` (`max_values`: None, `max_size`: Some(1300), added: 3775, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(147), added: 2622, mode: `MaxEncodedLen`)
	// Storage: `NomineesElection::Nominations` (r:1 w:0)
	// Proof: `NomineesElection::Nominations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn unbond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1900`
		//  Estimated: `5365`
		// Minimum execution time: 37_198 nanoseconds.
		Weight::from_parts(37_955_000, 5365)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: `NomineesElection::Ledger` (r:1 w:1)
	// Proof: `NomineesElection::Ledger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Tokens::Locks` (r:1 w:1)
	// Proof: `Tokens::Locks` (`max_values`: None, `max_size`: Some(1300), added: 3775, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(147), added: 2622, mode: `MaxEncodedLen`)
	// Storage: `NomineesElection::Nominations` (r:1 w:0)
	// Proof: `NomineesElection::Nominations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `c` is `[1, 7]`.
	fn rebond(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1920`
		//  Estimated: `5385`
		// Minimum execution time: 38_312 nanoseconds.
		Weight::from_parts(39_489_871, 5385)
			// Standard Error: 8_500
			.saturating_add(Weight::from_parts(51_131, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: `NomineesElection::CurrentEra` (r:1 w:0)
	// Proof: `NomineesElection::CurrentEra` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `NomineesElection::Ledger` (r:1 w:0)
	// Proof: `NomineesElection::Ledger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `c` is `[1, 7]`.
	fn withdraw_unbonded(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1012`
		//  Estimated: `4477`
		// Minimum execution time: 12_833 nanoseconds.
		Weight::from_parts(13_428_726, 4477)
			// Standard Error: 2_718
			.saturating_add(Weight::from_parts(10_670, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2))
	}
	// Storage: `NomineesElection::Ledger` (r:1 w:0)
	// Proof: `NomineesElection::Ledger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `NomineesElection::Nominations` (r:1 w:1)
	// Proof: `NomineesElection::Nominations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `NomineesElection::Votes` (r:7 w:7)
	// Proof: `NomineesElection::Votes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `c` is `[1, 7]`.
	fn nominate(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `944`
		//  Estimated: `4409 + c * (2475 ±0)`
		// Minimum execution time: 15_435 nanoseconds.
		Weight::from_parts(14_435_638, 4409)
			// Standard Error: 4_274
			.saturating_add(Weight::from_parts(1_610_409, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2475).saturating_mul(c.into()))
	}
	// Storage: `NomineesElection::Ledger` (r:1 w:0)
	// Proof: `NomineesElection::Ledger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `NomineesElection::Nominations` (r:1 w:1)
	// Proof: `NomineesElection::Nominations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `NomineesElection::Votes` (r:7 w:7)
	// Proof: `NomineesElection::Votes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `c` is `[1, 7]`.
	fn chill(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1030 + c * (95 ±0)`
		//  Estimated: `4496 + c * (2570 ±0)`
		// Minimum execution time: 18_571 nanoseconds.
		Weight::from_parts(16_544_031, 4496)
			// Standard Error: 14_536
			.saturating_add(Weight::from_parts(3_358_687, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2570).saturating_mul(c.into()))
	}
}
