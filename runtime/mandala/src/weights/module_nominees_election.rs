// This file is part of Acala.

// Copyright (C) 2020-2024 Acala Foundation.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for module_nominees_election
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-15, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ip-172-31-43-79`, CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/production/acala
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=*
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./templates/runtime-weight-template.hbs
// --output=./runtime/mandala/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for module_nominees_election.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> module_nominees_election::WeightInfo for WeightInfo<T> {
	// Storage: NomineesElection Ledger (r:1 w:1)
	// Proof Skipped: NomineesElection Ledger (max_values: None, max_size: None, mode: Measured)
	// Storage: Tokens Accounts (r:1 w:1)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(147), added: 2622, mode: MaxEncodedLen)
	// Storage: Tokens Locks (r:1 w:1)
	// Proof: Tokens Locks (max_values: None, max_size: Some(1300), added: 3775, mode: MaxEncodedLen)
	// Storage: NomineesElection Nominations (r:1 w:0)
	// Proof Skipped: NomineesElection Nominations (max_values: None, max_size: None, mode: Measured)
	fn bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2390`
		//  Estimated: `20087`
		// Minimum execution time: 51_752 nanoseconds.
		Weight::from_parts(52_724_000, 20087)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: NomineesElection CurrentEra (r:1 w:0)
	// Proof Skipped: NomineesElection CurrentEra (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: NomineesElection Ledger (r:1 w:1)
	// Proof Skipped: NomineesElection Ledger (max_values: None, max_size: None, mode: Measured)
	// Storage: Tokens Locks (r:1 w:1)
	// Proof: Tokens Locks (max_values: None, max_size: Some(1300), added: 3775, mode: MaxEncodedLen)
	// Storage: Tokens Accounts (r:1 w:1)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(147), added: 2622, mode: MaxEncodedLen)
	// Storage: NomineesElection Nominations (r:1 w:0)
	// Proof Skipped: NomineesElection Nominations (max_values: None, max_size: None, mode: Measured)
	fn unbond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1864`
		//  Estimated: `22384`
		// Minimum execution time: 44_308 nanoseconds.
		Weight::from_parts(45_826_000, 22384)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: NomineesElection Ledger (r:1 w:1)
	// Proof Skipped: NomineesElection Ledger (max_values: None, max_size: None, mode: Measured)
	// Storage: Tokens Locks (r:1 w:1)
	// Proof: Tokens Locks (max_values: None, max_size: Some(1300), added: 3775, mode: MaxEncodedLen)
	// Storage: Tokens Accounts (r:1 w:1)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(147), added: 2622, mode: MaxEncodedLen)
	// Storage: NomineesElection Nominations (r:1 w:0)
	// Proof Skipped: NomineesElection Nominations (max_values: None, max_size: None, mode: Measured)
	/// The range of component `c` is `[1, 7]`.
	fn rebond(_c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1884`
		//  Estimated: `19075`
		// Minimum execution time: 46_789 nanoseconds.
		Weight::from_parts(48_810_907, 19075)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: NomineesElection CurrentEra (r:1 w:0)
	// Proof Skipped: NomineesElection CurrentEra (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: NomineesElection Ledger (r:1 w:0)
	// Proof Skipped: NomineesElection Ledger (max_values: None, max_size: None, mode: Measured)
	/// The range of component `c` is `[1, 7]`.
	fn withdraw_unbonded(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1012`
		//  Estimated: `6974`
		// Minimum execution time: 15_408 nanoseconds.
		Weight::from_parts(16_119_782, 6974)
			// Standard Error: 4_544
			.saturating_add(Weight::from_parts(27_741, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2))
	}
	// Storage: NomineesElection Ledger (r:1 w:0)
	// Proof Skipped: NomineesElection Ledger (max_values: None, max_size: None, mode: Measured)
	// Storage: NomineesElection Nominations (r:1 w:1)
	// Proof Skipped: NomineesElection Nominations (max_values: None, max_size: None, mode: Measured)
	// Storage: NomineesElection Votes (r:7 w:7)
	// Proof Skipped: NomineesElection Votes (max_values: None, max_size: None, mode: Measured)
	/// The range of component `c` is `[1, 7]`.
	fn nominate(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `944`
		//  Estimated: `10752 + c * (2475 ±0)`
		// Minimum execution time: 18_083 nanoseconds.
		Weight::from_parts(16_982_237, 10752)
			// Standard Error: 5_923
			.saturating_add(Weight::from_parts(1_985_018, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2475).saturating_mul(c.into()))
	}
	// Storage: NomineesElection Ledger (r:1 w:0)
	// Proof Skipped: NomineesElection Ledger (max_values: None, max_size: None, mode: Measured)
	// Storage: NomineesElection Nominations (r:1 w:1)
	// Proof Skipped: NomineesElection Nominations (max_values: None, max_size: None, mode: Measured)
	// Storage: NomineesElection Votes (r:7 w:7)
	// Proof Skipped: NomineesElection Votes (max_values: None, max_size: None, mode: Measured)
	/// The range of component `c` is `[1, 7]`.
	fn chill(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1030 + c * (95 ±0)`
		//  Estimated: `11013 + c * (2760 ±0)`
		// Minimum execution time: 20_718 nanoseconds.
		Weight::from_parts(18_784_416, 11013)
			// Standard Error: 13_881
			.saturating_add(Weight::from_parts(3_723_048, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2760).saturating_mul(c.into()))
	}
}
