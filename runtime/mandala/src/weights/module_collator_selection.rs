// This file is part of Acala.

// Copyright (C) 2020-2024 Acala Foundation.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for module_collator_selection
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-15, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ip-172-31-43-79`, CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/production/acala
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=*
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./templates/runtime-weight-template.hbs
// --output=./runtime/mandala/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for module_collator_selection.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> module_collator_selection::WeightInfo for WeightInfo<T> {
	// Storage: CollatorSelection Invulnerables (r:0 w:1)
	// Proof: CollatorSelection Invulnerables (max_values: Some(1), max_size: Some(1601), added: 2096, mode: MaxEncodedLen)
	/// The range of component `b` is `[1, 50]`.
	fn set_invulnerables(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `965`
		//  Estimated: `0`
		// Minimum execution time: 15_688 nanoseconds.
		Weight::from_parts(16_394_819, 0)
			// Standard Error: 734
			.saturating_add(Weight::from_parts(42_767, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: CollatorSelection DesiredCandidates (r:0 w:1)
	// Proof: CollatorSelection DesiredCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn set_desired_candidates() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `965`
		//  Estimated: `0`
		// Minimum execution time: 14_643 nanoseconds.
		Weight::from_parts(14_977_000, 0)
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: CollatorSelection CandidacyBond (r:0 w:1)
	// Proof: CollatorSelection CandidacyBond (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn set_candidacy_bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `965`
		//  Estimated: `0`
		// Minimum execution time: 15_175 nanoseconds.
		Weight::from_parts(15_452_000, 0)
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: CollatorSelection NonCandidates (r:1 w:1)
	// Proof: CollatorSelection NonCandidates (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	// Storage: CollatorSelection CandidacyBond (r:1 w:0)
	// Proof: CollatorSelection CandidacyBond (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: CollatorSelection Candidates (r:1 w:1)
	// Proof: CollatorSelection Candidates (max_values: Some(1), max_size: Some(6402), added: 6897, mode: MaxEncodedLen)
	// Storage: CollatorSelection DesiredCandidates (r:1 w:0)
	// Proof: CollatorSelection DesiredCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: CollatorSelection Invulnerables (r:1 w:0)
	// Proof: CollatorSelection Invulnerables (max_values: Some(1), max_size: Some(1601), added: 2096, mode: MaxEncodedLen)
	// Storage: Session NextKeys (r:1 w:0)
	// Proof Skipped: Session NextKeys (max_values: None, max_size: None, mode: Measured)
	// Storage: Balances Reserves (r:1 w:1)
	// Proof: Balances Reserves (max_values: None, max_size: Some(168), added: 2643, mode: MaxEncodedLen)
	/// The range of component `c` is `[5, 200]`.
	fn register_as_candidate(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3362 + c * (36 ±0)`
		//  Estimated: `27799 + c * (37 ±0)`
		// Minimum execution time: 60_929 nanoseconds.
		Weight::from_parts(74_700_538, 27799)
			// Standard Error: 2_892
			.saturating_add(Weight::from_parts(193_170, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 37).saturating_mul(c.into()))
	}
	// Storage: CollatorSelection Candidates (r:1 w:1)
	// Proof: CollatorSelection Candidates (max_values: Some(1), max_size: Some(6402), added: 6897, mode: MaxEncodedLen)
	// Storage: CollatorSelection DesiredCandidates (r:1 w:0)
	// Proof: CollatorSelection DesiredCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: CollatorSelection Invulnerables (r:1 w:0)
	// Proof: CollatorSelection Invulnerables (max_values: Some(1), max_size: Some(1601), added: 2096, mode: MaxEncodedLen)
	// Storage: Session NextKeys (r:1 w:0)
	// Proof Skipped: Session NextKeys (max_values: None, max_size: None, mode: Measured)
	// Storage: Balances Reserves (r:1 w:0)
	// Proof: Balances Reserves (max_values: None, max_size: Some(168), added: 2643, mode: MaxEncodedLen)
	/// The range of component `c` is `[1, 200]`.
	fn register_candidate(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2589 + c * (35 ±0)`
		//  Estimated: `21964 + c * (37 ±0)`
		// Minimum execution time: 36_884 nanoseconds.
		Weight::from_parts(50_703_115, 21964)
			// Standard Error: 2_480
			.saturating_add(Weight::from_parts(176_341, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 37).saturating_mul(c.into()))
	}
	// Storage: CollatorSelection Candidates (r:1 w:1)
	// Proof: CollatorSelection Candidates (max_values: Some(1), max_size: Some(6402), added: 6897, mode: MaxEncodedLen)
	// Storage: Session CurrentIndex (r:1 w:0)
	// Proof Skipped: Session CurrentIndex (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: CollatorSelection NonCandidates (r:0 w:1)
	// Proof: CollatorSelection NonCandidates (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	/// The range of component `c` is `[6, 200]`.
	fn leave_intent(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1922 + c * (32 ±0)`
		//  Estimated: `11180 + c * (33 ±0)`
		// Minimum execution time: 28_827 nanoseconds.
		Weight::from_parts(36_176_710, 11180)
			// Standard Error: 1_475
			.saturating_add(Weight::from_parts(146_883, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 33).saturating_mul(c.into()))
	}
	// Storage: CollatorSelection NonCandidates (r:1 w:1)
	// Proof: CollatorSelection NonCandidates (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	// Storage: Session CurrentIndex (r:1 w:0)
	// Proof Skipped: Session CurrentIndex (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Balances Reserves (r:1 w:1)
	// Proof: Balances Reserves (max_values: None, max_size: Some(168), added: 2643, mode: MaxEncodedLen)
	fn withdraw_bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3697`
		//  Estimated: `12324`
		// Minimum execution time: 66_179 nanoseconds.
		Weight::from_parts(67_432_000, 12324)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: System Account (r:1 w:0)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: CollatorSelection SessionPoints (r:1 w:0)
	// Proof: CollatorSelection SessionPoints (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	fn note_author() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1966`
		//  Estimated: `7102`
		// Minimum execution time: 28_145 nanoseconds.
		Weight::from_parts(29_209_000, 7102)
			.saturating_add(T::DbWeight::get().reads(2))
	}
	// Storage: CollatorSelection Candidates (r:1 w:0)
	// Proof: CollatorSelection Candidates (max_values: Some(1), max_size: Some(6402), added: 6897, mode: MaxEncodedLen)
	// Storage: CollatorSelection Invulnerables (r:1 w:0)
	// Proof: CollatorSelection Invulnerables (max_values: Some(1), max_size: Some(1601), added: 2096, mode: MaxEncodedLen)
	fn new_session() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `7489`
		//  Estimated: `10973`
		// Minimum execution time: 39_967 nanoseconds.
		Weight::from_parts(41_614_000, 10973)
			.saturating_add(T::DbWeight::get().reads(2))
	}
	// Storage: Session Validators (r:1 w:0)
	// Proof Skipped: Session Validators (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: CollatorSelection Candidates (r:1 w:0)
	// Proof: CollatorSelection Candidates (max_values: Some(1), max_size: Some(6402), added: 6897, mode: MaxEncodedLen)
	// Storage: CollatorSelection SessionPoints (r:0 w:200)
	// Proof: CollatorSelection SessionPoints (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	/// The range of component `r` is `[5, 200]`.
	/// The range of component `c` is `[5, 200]`.
	fn start_session(_r: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1378 + c * (64 ±0)`
		//  Estimated: `10748 + c * (64 ±0)`
		// Minimum execution time: 22_032 nanoseconds.
		Weight::from_parts(14_914_736, 10748)
			// Standard Error: 2_644
			.saturating_add(Weight::from_parts(1_475_719, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 64).saturating_mul(c.into()))
	}
	// Storage: CollatorSelection SessionPoints (r:201 w:200)
	// Proof: CollatorSelection SessionPoints (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	// Storage: CollatorSelection Candidates (r:1 w:1)
	// Proof: CollatorSelection Candidates (max_values: Some(1), max_size: Some(6402), added: 6897, mode: MaxEncodedLen)
	// Storage: Session CurrentIndex (r:1 w:0)
	// Proof Skipped: Session CurrentIndex (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: CollatorSelection NonCandidates (r:0 w:3)
	// Proof: CollatorSelection NonCandidates (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	/// The range of component `r` is `[5, 200]`.
	/// The range of component `c` is `[5, 200]`.
	fn end_session(_r: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `8246 + c * (49 ±0)`
		//  Estimated: `3509 + c * (2656 ±0)`
		// Minimum execution time: 33_428 nanoseconds.
		Weight::from_parts(3_137_799_914, 3509)
			// Standard Error: 48_740
			.saturating_add(Weight::from_parts(4_513_816, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(198))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2656).saturating_mul(c.into()))
	}
}
