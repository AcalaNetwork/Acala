// This file is part of Acala.

// Copyright (C) 2020-2024 Acala Foundation.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for orml_authority
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 35.0.1
//! DATE: 2024-04-29, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ip-172-31-38-126`, CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/production/acala
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=*
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./templates/runtime-weight-template.hbs
// --output=./runtime/mandala/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for orml_authority.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> orml_authority::WeightInfo for WeightInfo<T> {
	fn dispatch_as() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1001`
		//  Estimated: `0`
		// Minimum execution time: 12_988 nanoseconds.
		Weight::from_parts(13_357_000, 0)
	}
	// Storage: `Authority::NextTaskIndex` (r:1 w:1)
	// Proof: `Authority::NextTaskIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Scheduler::Lookup` (r:1 w:1)
	// Proof: `Scheduler::Lookup` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	// Storage: `Scheduler::Agenda` (r:1 w:1)
	// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(39213), added: 41688, mode: `MaxEncodedLen`)
	fn schedule_dispatch_without_delay() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1147`
		//  Estimated: `42678`
		// Minimum execution time: 24_897 nanoseconds.
		Weight::from_parts(25_488_000, 42678)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: `Authority::NextTaskIndex` (r:1 w:1)
	// Proof: `Authority::NextTaskIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Scheduler::Lookup` (r:1 w:1)
	// Proof: `Scheduler::Lookup` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	// Storage: `Scheduler::Agenda` (r:1 w:1)
	// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(39213), added: 41688, mode: `MaxEncodedLen`)
	fn schedule_dispatch_with_delay() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1147`
		//  Estimated: `42678`
		// Minimum execution time: 25_353 nanoseconds.
		Weight::from_parts(26_007_000, 42678)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: `Scheduler::Lookup` (r:1 w:1)
	// Proof: `Scheduler::Lookup` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	// Storage: `Scheduler::Agenda` (r:2 w:2)
	// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(39213), added: 41688, mode: `MaxEncodedLen`)
	fn fast_track_scheduled_dispatch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1224`
		//  Estimated: `84366`
		// Minimum execution time: 32_453 nanoseconds.
		Weight::from_parts(33_281_000, 84366)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: `Scheduler::Lookup` (r:1 w:1)
	// Proof: `Scheduler::Lookup` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	// Storage: `Scheduler::Agenda` (r:2 w:2)
	// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(39213), added: 41688, mode: `MaxEncodedLen`)
	fn delay_scheduled_dispatch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1224`
		//  Estimated: `84366`
		// Minimum execution time: 32_644 nanoseconds.
		Weight::from_parts(33_214_000, 84366)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: `Scheduler::Lookup` (r:1 w:1)
	// Proof: `Scheduler::Lookup` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	// Storage: `Scheduler::Agenda` (r:1 w:1)
	// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(39213), added: 41688, mode: `MaxEncodedLen`)
	fn cancel_scheduled_dispatch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1224`
		//  Estimated: `42678`
		// Minimum execution time: 26_185 nanoseconds.
		Weight::from_parts(26_650_000, 42678)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: `Authority::SavedCalls` (r:0 w:1)
	// Proof: `Authority::SavedCalls` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn authorize_call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1001`
		//  Estimated: `1001`
		// Minimum execution time: 13_891 nanoseconds.
		Weight::from_parts(14_308_000, 1001)
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: `Authority::SavedCalls` (r:1 w:1)
	// Proof: `Authority::SavedCalls` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_authorized_call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1342`
		//  Estimated: `4807`
		// Minimum execution time: 19_037 nanoseconds.
		Weight::from_parts(19_481_000, 4807)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: `Authority::SavedCalls` (r:1 w:1)
	// Proof: `Authority::SavedCalls` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn trigger_call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1342`
		//  Estimated: `4807`
		// Minimum execution time: 22_652 nanoseconds.
		Weight::from_parts(23_025_000, 4807)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
