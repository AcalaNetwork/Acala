// This file is part of Acala.

// Copyright (C) 2020-2024 Acala Foundation.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for module_asset_registry
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-15, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ip-172-31-43-79`, CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/production/acala
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=*
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./templates/runtime-weight-template.hbs
// --output=./runtime/mandala/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for module_asset_registry.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> module_asset_registry::WeightInfo for WeightInfo<T> {
	// Storage: AssetRegistry NextForeignAssetId (r:1 w:1)
	// Proof Skipped: AssetRegistry NextForeignAssetId (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: AssetRegistry LocationToCurrencyIds (r:1 w:1)
	// Proof Skipped: AssetRegistry LocationToCurrencyIds (max_values: None, max_size: None, mode: Measured)
	// Storage: AssetRegistry ForeignAssetLocations (r:1 w:1)
	// Proof Skipped: AssetRegistry ForeignAssetLocations (max_values: None, max_size: None, mode: Measured)
	// Storage: AssetRegistry AssetMetadatas (r:1 w:1)
	// Proof Skipped: AssetRegistry AssetMetadatas (max_values: None, max_size: None, mode: Measured)
	fn register_foreign_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1107`
		//  Estimated: `16308`
		// Minimum execution time: 28_493 nanoseconds.
		Weight::from_parts(29_458_000, 16308)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: AssetRegistry ForeignAssetLocations (r:1 w:1)
	// Proof Skipped: AssetRegistry ForeignAssetLocations (max_values: None, max_size: None, mode: Measured)
	// Storage: AssetRegistry AssetMetadatas (r:1 w:1)
	// Proof Skipped: AssetRegistry AssetMetadatas (max_values: None, max_size: None, mode: Measured)
	fn update_foreign_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1263`
		//  Estimated: `9456`
		// Minimum execution time: 28_136 nanoseconds.
		Weight::from_parts(28_816_000, 9456)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: AssetRegistry NextStableAssetId (r:1 w:1)
	// Proof Skipped: AssetRegistry NextStableAssetId (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: AssetRegistry AssetMetadatas (r:1 w:1)
	// Proof Skipped: AssetRegistry AssetMetadatas (max_values: None, max_size: None, mode: Measured)
	fn register_stable_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1107`
		//  Estimated: `7164`
		// Minimum execution time: 23_248 nanoseconds.
		Weight::from_parts(24_209_000, 7164)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: AssetRegistry AssetMetadatas (r:1 w:1)
	// Proof Skipped: AssetRegistry AssetMetadatas (max_values: None, max_size: None, mode: Measured)
	fn update_stable_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1201`
		//  Estimated: `4666`
		// Minimum execution time: 23_454 nanoseconds.
		Weight::from_parts(23_926_000, 4666)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: EVM Accounts (r:2 w:0)
	// Proof Skipped: EVM Accounts (max_values: None, max_size: None, mode: Measured)
	// Storage: EVM Codes (r:1 w:0)
	// Proof Skipped: EVM Codes (max_values: None, max_size: None, mode: Measured)
	// Storage: EVM AccountStorages (r:5 w:0)
	// Proof Skipped: EVM AccountStorages (max_values: None, max_size: None, mode: Measured)
	// Storage: AssetRegistry AssetMetadatas (r:1 w:1)
	// Proof Skipped: AssetRegistry AssetMetadatas (max_values: None, max_size: None, mode: Measured)
	// Storage: AssetRegistry Erc20IdToAddress (r:1 w:1)
	// Proof Skipped: AssetRegistry Erc20IdToAddress (max_values: None, max_size: None, mode: Measured)
	fn register_erc20_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `7716`
		//  Estimated: `68280`
		// Minimum execution time: 208_499 nanoseconds.
		Weight::from_parts(213_169_000, 68280)
			.saturating_add(T::DbWeight::get().reads(10))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: AssetRegistry AssetMetadatas (r:1 w:1)
	// Proof Skipped: AssetRegistry AssetMetadatas (max_values: None, max_size: None, mode: Measured)
	fn update_erc20_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1352`
		//  Estimated: `4817`
		// Minimum execution time: 32_387 nanoseconds.
		Weight::from_parts(33_379_000, 4817)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: AssetRegistry AssetMetadatas (r:1 w:1)
	// Proof Skipped: AssetRegistry AssetMetadatas (max_values: None, max_size: None, mode: Measured)
	fn register_native_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1107`
		//  Estimated: `4572`
		// Minimum execution time: 21_161 nanoseconds.
		Weight::from_parts(21_900_000, 4572)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: AssetRegistry AssetMetadatas (r:1 w:1)
	// Proof Skipped: AssetRegistry AssetMetadatas (max_values: None, max_size: None, mode: Measured)
	fn update_native_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1176`
		//  Estimated: `4641`
		// Minimum execution time: 22_204 nanoseconds.
		Weight::from_parts(22_916_000, 4641)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
