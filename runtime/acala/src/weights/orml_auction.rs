// This file is part of Acala.

// Copyright (C) 2020-2024 Acala Foundation.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for orml_auction
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-10-05, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ip-172-31-42-209`, CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! WASM-EXECUTION: Compiled, CHAIN: Some("acala-dev"), DB CACHE: 1024

// Executed Command:
// target/production/acala
// benchmark
// pallet
// --chain=acala-dev
// --steps=50
// --repeat=20
// --pallet=*
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./templates/runtime-weight-template.hbs
// --output=./runtime/acala/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for orml_auction.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> orml_auction::WeightInfo for WeightInfo<T> {
	// Storage: `Auction::Auctions` (r:1 w:1)
	// Proof: `Auction::Auctions` (`max_values`: None, `max_size`: Some(70), added: 2545, mode: `MaxEncodedLen`)
	// Storage: `AuctionManager::CollateralAuctions` (r:1 w:1)
	// Proof: `AuctionManager::CollateralAuctions` (`max_values`: None, `max_size`: Some(139), added: 2614, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:3 w:3)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(147), added: 2622, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:1 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `EvmAccounts::EvmAddresses` (r:1 w:0)
	// Proof: `EvmAccounts::EvmAddresses` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	// Storage: `Auction::AuctionEndTime` (r:0 w:2)
	// Proof: `Auction::AuctionEndTime` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn bid_collateral_auction() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2500`
		//  Estimated: `8856`
		// Minimum execution time: 102_080 nanoseconds.
		Weight::from_parts(104_983_000, 8856)
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	// Storage: `Auction::AuctionEndTime` (r:101 w:100)
	// Proof: `Auction::AuctionEndTime` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	// Storage: `Auction::Auctions` (r:100 w:100)
	// Proof: `Auction::Auctions` (`max_values`: None, `max_size`: Some(70), added: 2545, mode: `MaxEncodedLen`)
	// Storage: `AuctionManager::CollateralAuctions` (r:100 w:100)
	// Proof: `AuctionManager::CollateralAuctions` (`max_values`: None, `max_size`: Some(139), added: 2614, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:2 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(147), added: 2622, mode: `MaxEncodedLen`)
	// Storage: `AuctionManager::TotalCollateralInAuction` (r:1 w:1)
	// Proof: `AuctionManager::TotalCollateralInAuction` (`max_values`: None, `max_size`: Some(67), added: 2542, mode: `MaxEncodedLen`)
	// Storage: `Dex::TradingPairStatuses` (r:3 w:0)
	// Proof: `Dex::TradingPairStatuses` (`max_values`: None, `max_size`: Some(195), added: 2670, mode: `MaxEncodedLen`)
	// Storage: `StableAsset::Pools` (r:1 w:0)
	// Proof: `StableAsset::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `AggregatedDex::AggregatedSwapPaths` (r:1 w:0)
	// Proof: `AggregatedDex::AggregatedSwapPaths` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `CdpTreasury::DebitPool` (r:1 w:1)
	// Proof: `CdpTreasury::DebitPool` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	// Storage: `Tokens::TotalIssuance` (r:1 w:1)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(67), added: 2542, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `AuctionManager::TotalTargetInAuction` (r:1 w:1)
	// Proof: `AuctionManager::TotalTargetInAuction` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 100]`.
	fn on_finalize(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2632 + c * (979 ±0)`
		//  Estimated: `9000 + c * (2614 ±0)`
		// Minimum execution time: 104_423 nanoseconds.
		Weight::from_parts(53_055_863, 9000)
			// Standard Error: 19_936
			.saturating_add(Weight::from_parts(47_226_015, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(14))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(7))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2614).saturating_mul(c.into()))
	}
}
