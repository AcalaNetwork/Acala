// This file is part of Acala.

// Copyright (C) 2020-2023 Acala Foundation.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for module_homa
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-15, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ip-172-31-46-101`, CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("acala-dev"), DB CACHE: 1024

// Executed Command:
// target/production/acala
// benchmark
// pallet
// --chain=acala-dev
// --steps=50
// --repeat=20
// --pallet=*
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./templates/runtime-weight-template.hbs
// --output=./runtime/acala/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for module_homa.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> module_homa::WeightInfo for WeightInfo<T> {
	// Storage: ParachainSystem ValidationData (r:1 w:0)
	// Proof Skipped: ParachainSystem ValidationData (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Homa LastEraBumpedBlock (r:1 w:0)
	// Proof Skipped: Homa LastEraBumpedBlock (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Homa BumpEraFrequency (r:1 w:0)
	// Proof Skipped: Homa BumpEraFrequency (max_values: Some(1), max_size: None, mode: Measured)
	fn on_initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `828`
		//  Estimated: `6939`
		// Minimum execution time: 7_654 nanoseconds.
		Weight::from_parts(7_919_000, 6939)
			.saturating_add(T::DbWeight::get().reads(3))
	}
	// Storage: ParachainSystem ValidationData (r:1 w:0)
	// Proof Skipped: ParachainSystem ValidationData (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Homa LastEraBumpedBlock (r:1 w:1)
	// Proof Skipped: Homa LastEraBumpedBlock (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Homa BumpEraFrequency (r:1 w:0)
	// Proof Skipped: Homa BumpEraFrequency (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Homa RelayChainCurrentEra (r:1 w:1)
	// Proof Skipped: Homa RelayChainCurrentEra (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Homa EstimatedRewardRatePerEra (r:1 w:0)
	// Proof Skipped: Homa EstimatedRewardRatePerEra (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Homa StakingLedgers (r:2 w:1)
	// Proof Skipped: Homa StakingLedgers (max_values: None, max_size: None, mode: Measured)
	// Storage: Homa TotalStakingBonded (r:1 w:1)
	// Proof Skipped: Homa TotalStakingBonded (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Homa CommissionRate (r:1 w:0)
	// Proof Skipped: Homa CommissionRate (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Tokens TotalIssuance (r:2 w:2)
	// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(67), added: 2542, mode: MaxEncodedLen)
	// Storage: Tokens Accounts (r:3 w:3)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(147), added: 2622, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: XcmInterface XcmDestWeightAndFee (r:4 w:0)
	// Proof Skipped: XcmInterface XcmDestWeightAndFee (max_values: None, max_size: None, mode: Measured)
	// Storage: ParachainInfo ParachainId (r:1 w:0)
	// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: PolkadotXcm SupportedVersion (r:1 w:0)
	// Proof Skipped: PolkadotXcm SupportedVersion (max_values: None, max_size: None, mode: Measured)
	// Storage: PolkadotXcm VersionDiscoveryQueue (r:1 w:1)
	// Proof Skipped: PolkadotXcm VersionDiscoveryQueue (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: PolkadotXcm SafeXcmVersion (r:1 w:0)
	// Proof Skipped: PolkadotXcm SafeXcmVersion (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainSystem HostConfiguration (r:1 w:0)
	// Proof Skipped: ParachainSystem HostConfiguration (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainSystem PendingUpwardMessages (r:1 w:1)
	// Proof Skipped: ParachainSystem PendingUpwardMessages (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Homa UnclaimedRedemption (r:1 w:1)
	// Proof Skipped: Homa UnclaimedRedemption (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Homa ToBondPool (r:1 w:1)
	// Proof Skipped: Homa ToBondPool (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Homa SoftBondedCapPerSubAccount (r:1 w:0)
	// Proof Skipped: Homa SoftBondedCapPerSubAccount (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: EVM XcmOrigin (r:1 w:1)
	// Proof Skipped: EVM XcmOrigin (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: UnknownTokens ConcreteFungibleBalances (r:1 w:0)
	// Proof Skipped: UnknownTokens ConcreteFungibleBalances (max_values: None, max_size: None, mode: Measured)
	// Storage: Homa RedeemRequests (r:2 w:1)
	// Proof Skipped: Homa RedeemRequests (max_values: None, max_size: None, mode: Measured)
	// Storage: Homa Unbondings (r:1 w:1)
	// Proof Skipped: Homa Unbondings (max_values: None, max_size: None, mode: Measured)
	// Storage: Homa TotalVoidLiquid (r:0 w:1)
	// Proof Skipped: Homa TotalVoidLiquid (max_values: Some(1), max_size: None, mode: Measured)
	fn on_initialize_with_bump_era() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2932`
		//  Estimated: `142559`
		// Minimum execution time: 371_858 nanoseconds.
		Weight::from_parts(381_282_000, 142559)
			.saturating_add(T::DbWeight::get().reads(34))
			.saturating_add(T::DbWeight::get().writes(19))
	}
	// Storage: Homa TotalStakingBonded (r:1 w:0)
	// Proof Skipped: Homa TotalStakingBonded (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Homa ToBondPool (r:1 w:1)
	// Proof Skipped: Homa ToBondPool (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Homa SoftBondedCapPerSubAccount (r:1 w:0)
	// Proof Skipped: Homa SoftBondedCapPerSubAccount (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Tokens Accounts (r:3 w:3)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(147), added: 2622, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(67), added: 2542, mode: MaxEncodedLen)
	// Storage: Homa TotalVoidLiquid (r:1 w:1)
	// Proof Skipped: Homa TotalVoidLiquid (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Homa EstimatedRewardRatePerEra (r:1 w:0)
	// Proof Skipped: Homa EstimatedRewardRatePerEra (max_values: Some(1), max_size: None, mode: Measured)
	fn mint() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1672`
		//  Estimated: `31766`
		// Minimum execution time: 88_890 nanoseconds.
		Weight::from_parts(91_599_000, 31766)
			.saturating_add(T::DbWeight::get().reads(10))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	// Storage: Homa RedeemRequests (r:1 w:1)
	// Proof Skipped: Homa RedeemRequests (max_values: None, max_size: None, mode: Measured)
	// Storage: Tokens Accounts (r:2 w:2)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(147), added: 2622, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn request_redeem() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1581`
		//  Estimated: `14873`
		// Minimum execution time: 59_340 nanoseconds.
		Weight::from_parts(60_400_000, 14873)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: Homa RedeemRequests (r:50 w:50)
	// Proof Skipped: Homa RedeemRequests (max_values: None, max_size: None, mode: Measured)
	// Storage: Homa ToBondPool (r:1 w:1)
	// Proof Skipped: Homa ToBondPool (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Homa TotalStakingBonded (r:1 w:0)
	// Proof Skipped: Homa TotalStakingBonded (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(67), added: 2542, mode: MaxEncodedLen)
	// Storage: Homa TotalVoidLiquid (r:1 w:0)
	// Proof Skipped: Homa TotalVoidLiquid (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Homa FastMatchFeeRate (r:1 w:0)
	// Proof Skipped: Homa FastMatchFeeRate (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Tokens Accounts (r:52 w:52)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(147), added: 2622, mode: MaxEncodedLen)
	// Storage: System Account (r:51 w:51)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 50]`.
	fn fast_match_redeems(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1921 + n * (295 ±0)`
		//  Estimated: `29894 + n * (9175 ±0)`
		// Minimum execution time: 102_002 nanoseconds.
		Weight::from_parts(37_555_703, 29894)
			// Standard Error: 25_740
			.saturating_add(Weight::from_parts(58_940_161, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(5))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 9175).saturating_mul(n.into()))
	}
	// Storage: Homa RelayChainCurrentEra (r:1 w:0)
	// Proof Skipped: Homa RelayChainCurrentEra (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Homa Unbondings (r:2 w:1)
	// Proof Skipped: Homa Unbondings (max_values: None, max_size: None, mode: Measured)
	// Storage: Homa UnclaimedRedemption (r:1 w:1)
	// Proof Skipped: Homa UnclaimedRedemption (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Tokens Accounts (r:2 w:2)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(147), added: 2622, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: EvmAccounts EvmAddresses (r:1 w:0)
	// Proof: EvmAccounts EvmAddresses (max_values: None, max_size: Some(60), added: 2535, mode: MaxEncodedLen)
	fn claim_redemption() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1791`
		//  Estimated: `30238`
		// Minimum execution time: 82_829 nanoseconds.
		Weight::from_parts(84_423_000, 30238)
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: Homa EstimatedRewardRatePerEra (r:1 w:1)
	// Proof Skipped: Homa EstimatedRewardRatePerEra (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Homa CommissionRate (r:1 w:1)
	// Proof Skipped: Homa CommissionRate (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Homa FastMatchFeeRate (r:1 w:1)
	// Proof Skipped: Homa FastMatchFeeRate (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Homa SoftBondedCapPerSubAccount (r:0 w:1)
	// Proof Skipped: Homa SoftBondedCapPerSubAccount (max_values: Some(1), max_size: None, mode: Measured)
	fn update_homa_params() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1110`
		//  Estimated: `8895`
		// Minimum execution time: 37_198 nanoseconds.
		Weight::from_parts(38_091_000, 8895)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: ParachainSystem ValidationData (r:1 w:0)
	// Proof Skipped: ParachainSystem ValidationData (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Homa LastEraBumpedBlock (r:0 w:1)
	// Proof Skipped: Homa LastEraBumpedBlock (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Homa BumpEraFrequency (r:0 w:1)
	// Proof Skipped: Homa BumpEraFrequency (max_values: Some(1), max_size: None, mode: Measured)
	fn update_bump_era_params() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1177`
		//  Estimated: `5016`
		// Minimum execution time: 27_517 nanoseconds.
		Weight::from_parts(28_614_000, 5016)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Homa StakingLedgers (r:10 w:10)
	// Proof Skipped: Homa StakingLedgers (max_values: None, max_size: None, mode: Measured)
	// Storage: Homa TotalStakingBonded (r:1 w:1)
	// Proof Skipped: Homa TotalStakingBonded (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `n` is `[0, 10]`.
	fn reset_ledgers(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1110`
		//  Estimated: `4695 + n * (2475 ±0)`
		// Minimum execution time: 6_252 nanoseconds.
		Weight::from_parts(14_696_791, 4695)
			// Standard Error: 49_045
			.saturating_add(Weight::from_parts(10_534_327, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2475).saturating_mul(n.into()))
	}
	// Storage: Homa RelayChainCurrentEra (r:1 w:1)
	// Proof Skipped: Homa RelayChainCurrentEra (max_values: Some(1), max_size: None, mode: Measured)
	fn reset_current_era() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1110`
		//  Estimated: `2595`
		// Minimum execution time: 20_363 nanoseconds.
		Weight::from_parts(21_058_000, 2595)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
