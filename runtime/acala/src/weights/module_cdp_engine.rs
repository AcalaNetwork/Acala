// This file is part of Acala.

// Copyright (C) 2020-2023 Acala Foundation.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for module_cdp_engine
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-10-05, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ip-172-31-42-209`, CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! WASM-EXECUTION: Compiled, CHAIN: Some("acala-dev"), DB CACHE: 1024

// Executed Command:
// target/production/acala
// benchmark
// pallet
// --chain=acala-dev
// --steps=50
// --repeat=20
// --pallet=*
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./templates/runtime-weight-template.hbs
// --output=./runtime/acala/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for module_cdp_engine.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> module_cdp_engine::WeightInfo for WeightInfo<T> {
	// Storage: `Aura::CurrentSlot` (r:1 w:1)
	// Proof: `Aura::CurrentSlot` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	// Storage: `Aura::Authorities` (r:1 w:0)
	// Proof: `Aura::Authorities` (`max_values`: Some(1), `max_size`: Some(1025), added: 1520, mode: `MaxEncodedLen`)
	// Storage: `CdpEngine::LastAccumulationSecs` (r:1 w:1)
	// Proof: `CdpEngine::LastAccumulationSecs` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	// Storage: `EmergencyShutdown::IsShutdown` (r:1 w:0)
	// Proof: `EmergencyShutdown::IsShutdown` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	// Storage: `CdpEngine::CollateralParams` (r:5 w:0)
	// Proof: `CdpEngine::CollateralParams` (`max_values`: None, `max_size`: Some(135), added: 2610, mode: `MaxEncodedLen`)
	// Storage: `System::ParentHash` (r:0 w:1)
	// Proof: `System::ParentHash` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	// Storage: `System::Digest` (r:0 w:1)
	// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `System::BlockHash` (r:0 w:1)
	// Proof: `System::BlockHash` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	// Storage: UNKNOWN KEY `0x3a65787472696e7369635f696e646578` (r:0 w:1)
	// Proof: UNKNOWN KEY `0x3a65787472696e7369635f696e646578` (r:0 w:1)
	// Storage: UNKNOWN KEY `0x3a696e747261626c6f636b5f656e74726f7079` (r:0 w:1)
	// Proof: UNKNOWN KEY `0x3a696e747261626c6f636b5f656e74726f7079` (r:0 w:1)
	// Storage: `Timestamp::Now` (r:0 w:1)
	// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	// Storage: `Timestamp::DidUpdate` (r:0 w:1)
	// Proof: `Timestamp::DidUpdate` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[0, 4]`.
	fn on_initialize(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1018 + c * (91 ±0)`
		//  Estimated: `3600 + c * (2610 ±0)`
		// Minimum execution time: 25_864 nanoseconds.
		Weight::from_parts(27_346_736, 3600)
			// Standard Error: 33_131
			.saturating_add(Weight::from_parts(6_268_124, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(9))
			.saturating_add(Weight::from_parts(0, 2610).saturating_mul(c.into()))
	}
	// Storage: `CdpEngine::CollateralParams` (r:1 w:1)
	// Proof: `CdpEngine::CollateralParams` (`max_values`: None, `max_size`: Some(135), added: 2610, mode: `MaxEncodedLen`)
	fn set_collateral_params() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1205`
		//  Estimated: `3600`
		// Minimum execution time: 33_835 nanoseconds.
		Weight::from_parts(34_392_000, 3600)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: `EmergencyShutdown::IsShutdown` (r:1 w:0)
	// Proof: `EmergencyShutdown::IsShutdown` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	// Storage: `Loans::Positions` (r:1 w:1)
	// Proof: `Loans::Positions` (`max_values`: None, `max_size`: Some(123), added: 2598, mode: `MaxEncodedLen`)
	// Storage: `Prices::LockedPrice` (r:2 w:0)
	// Proof: `Prices::LockedPrice` (`max_values`: None, `max_size`: Some(67), added: 2542, mode: `MaxEncodedLen`)
	// Storage: `AcalaOracle::Values` (r:1 w:0)
	// Proof: `AcalaOracle::Values` (`max_values`: None, `max_size`: Some(75), added: 2550, mode: `MaxEncodedLen`)
	// Storage: `AssetRegistry::AssetMetadatas` (r:2 w:0)
	// Proof: `AssetRegistry::AssetMetadatas` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `CdpEngine::DebitExchangeRate` (r:1 w:0)
	// Proof: `CdpEngine::DebitExchangeRate` (`max_values`: None, `max_size`: Some(67), added: 2542, mode: `MaxEncodedLen`)
	// Storage: `CdpEngine::CollateralParams` (r:1 w:0)
	// Proof: `CdpEngine::CollateralParams` (`max_values`: None, `max_size`: Some(135), added: 2610, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:2 w:2)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(147), added: 2622, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:3 w:3)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `EvmAccounts::EvmAddresses` (r:1 w:0)
	// Proof: `EvmAccounts::EvmAddresses` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	// Storage: `CdpTreasury::DebitPool` (r:1 w:1)
	// Proof: `CdpTreasury::DebitPool` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	// Storage: `Rewards::SharesAndWithdrawnRewards` (r:1 w:1)
	// Proof: `Rewards::SharesAndWithdrawnRewards` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Rewards::PoolInfos` (r:1 w:1)
	// Proof: `Rewards::PoolInfos` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Loans::TotalPositions` (r:1 w:1)
	// Proof: `Loans::TotalPositions` (`max_values`: None, `max_size`: Some(83), added: 2558, mode: `MaxEncodedLen`)
	// Storage: `AuctionManager::TotalCollateralInAuction` (r:1 w:1)
	// Proof: `AuctionManager::TotalCollateralInAuction` (`max_values`: None, `max_size`: Some(67), added: 2542, mode: `MaxEncodedLen`)
	// Storage: `Dex::TradingPairStatuses` (r:3 w:0)
	// Proof: `Dex::TradingPairStatuses` (`max_values`: None, `max_size`: Some(195), added: 2670, mode: `MaxEncodedLen`)
	// Storage: `StableAsset::Pools` (r:1 w:0)
	// Proof: `StableAsset::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `AggregatedDex::AggregatedSwapPaths` (r:1 w:0)
	// Proof: `AggregatedDex::AggregatedSwapPaths` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `CdpEngine::LiquidationContracts` (r:1 w:0)
	// Proof: `CdpEngine::LiquidationContracts` (`max_values`: Some(1), `max_size`: Some(201), added: 696, mode: `MaxEncodedLen`)
	// Storage: `CdpTreasury::ExpectedCollateralAuctionSize` (r:1 w:0)
	// Proof: `CdpTreasury::ExpectedCollateralAuctionSize` (`max_values`: None, `max_size`: Some(67), added: 2542, mode: `MaxEncodedLen`)
	// Storage: `AuctionManager::TotalTargetInAuction` (r:1 w:1)
	// Proof: `AuctionManager::TotalTargetInAuction` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	// Storage: `Auction::AuctionsIndex` (r:1 w:1)
	// Proof: `Auction::AuctionsIndex` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	// Storage: `AuctionManager::CollateralAuctions` (r:0 w:50)
	// Proof: `AuctionManager::CollateralAuctions` (`max_values`: None, `max_size`: Some(139), added: 2614, mode: `MaxEncodedLen`)
	// Storage: `Auction::AuctionEndTime` (r:0 w:50)
	// Proof: `Auction::AuctionEndTime` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	// Storage: `Auction::Auctions` (r:0 w:50)
	// Proof: `Auction::Auctions` (`max_values`: None, `max_size`: Some(70), added: 2545, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 50]`.
	fn liquidate_by_auction(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3584`
		//  Estimated: `9524`
		// Minimum execution time: 198_773 nanoseconds.
		Weight::from_parts(201_219_229, 9524)
			// Standard Error: 34_355
			.saturating_add(Weight::from_parts(12_793_552, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(29))
			.saturating_add(T::DbWeight::get().writes(15))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(b.into())))
	}
	// Storage: `EmergencyShutdown::IsShutdown` (r:1 w:0)
	// Proof: `EmergencyShutdown::IsShutdown` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	// Storage: `Loans::Positions` (r:1 w:1)
	// Proof: `Loans::Positions` (`max_values`: None, `max_size`: Some(123), added: 2598, mode: `MaxEncodedLen`)
	// Storage: `Prices::LockedPrice` (r:2 w:0)
	// Proof: `Prices::LockedPrice` (`max_values`: None, `max_size`: Some(67), added: 2542, mode: `MaxEncodedLen`)
	// Storage: `AcalaOracle::Values` (r:1 w:0)
	// Proof: `AcalaOracle::Values` (`max_values`: None, `max_size`: Some(75), added: 2550, mode: `MaxEncodedLen`)
	// Storage: `AssetRegistry::AssetMetadatas` (r:2 w:0)
	// Proof: `AssetRegistry::AssetMetadatas` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Homa::TotalStakingBonded` (r:1 w:0)
	// Proof: `Homa::TotalStakingBonded` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Homa::ToBondPool` (r:1 w:0)
	// Proof: `Homa::ToBondPool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Tokens::TotalIssuance` (r:1 w:0)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(67), added: 2542, mode: `MaxEncodedLen`)
	// Storage: `Homa::TotalVoidLiquid` (r:1 w:0)
	// Proof: `Homa::TotalVoidLiquid` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `CdpEngine::DebitExchangeRate` (r:1 w:0)
	// Proof: `CdpEngine::DebitExchangeRate` (`max_values`: None, `max_size`: Some(67), added: 2542, mode: `MaxEncodedLen`)
	// Storage: `CdpEngine::CollateralParams` (r:1 w:0)
	// Proof: `CdpEngine::CollateralParams` (`max_values`: None, `max_size`: Some(135), added: 2610, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:6 w:6)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(147), added: 2622, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:4 w:3)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `EvmAccounts::EvmAddresses` (r:1 w:0)
	// Proof: `EvmAccounts::EvmAddresses` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	// Storage: `CdpTreasury::DebitPool` (r:1 w:1)
	// Proof: `CdpTreasury::DebitPool` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	// Storage: `Rewards::SharesAndWithdrawnRewards` (r:1 w:1)
	// Proof: `Rewards::SharesAndWithdrawnRewards` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Rewards::PoolInfos` (r:1 w:1)
	// Proof: `Rewards::PoolInfos` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Loans::TotalPositions` (r:1 w:1)
	// Proof: `Loans::TotalPositions` (`max_values`: None, `max_size`: Some(83), added: 2558, mode: `MaxEncodedLen`)
	// Storage: `AuctionManager::TotalCollateralInAuction` (r:1 w:0)
	// Proof: `AuctionManager::TotalCollateralInAuction` (`max_values`: None, `max_size`: Some(67), added: 2542, mode: `MaxEncodedLen`)
	// Storage: `Dex::TradingPairStatuses` (r:4 w:0)
	// Proof: `Dex::TradingPairStatuses` (`max_values`: None, `max_size`: Some(195), added: 2670, mode: `MaxEncodedLen`)
	// Storage: `Dex::LiquidityPool` (r:2 w:2)
	// Proof: `Dex::LiquidityPool` (`max_values`: None, `max_size`: Some(126), added: 2601, mode: `MaxEncodedLen`)
	// Storage: `StableAsset::Pools` (r:1 w:0)
	// Proof: `StableAsset::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `AggregatedDex::AggregatedSwapPaths` (r:1 w:0)
	// Proof: `AggregatedDex::AggregatedSwapPaths` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn liquidate_by_dex() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4462`
		//  Estimated: `16722`
		// Minimum execution time: 303_930 nanoseconds.
		Weight::from_parts(313_708_000, 16722)
			.saturating_add(T::DbWeight::get().reads(37))
			.saturating_add(T::DbWeight::get().writes(16))
	}
	// Storage: `EmergencyShutdown::IsShutdown` (r:1 w:0)
	// Proof: `EmergencyShutdown::IsShutdown` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	// Storage: `Loans::Positions` (r:1 w:1)
	// Proof: `Loans::Positions` (`max_values`: None, `max_size`: Some(123), added: 2598, mode: `MaxEncodedLen`)
	// Storage: `Prices::LockedPrice` (r:2 w:0)
	// Proof: `Prices::LockedPrice` (`max_values`: None, `max_size`: Some(67), added: 2542, mode: `MaxEncodedLen`)
	// Storage: `AssetRegistry::AssetMetadatas` (r:1 w:0)
	// Proof: `AssetRegistry::AssetMetadatas` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `CdpEngine::DebitExchangeRate` (r:1 w:0)
	// Proof: `CdpEngine::DebitExchangeRate` (`max_values`: None, `max_size`: Some(67), added: 2542, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:2 w:2)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(147), added: 2622, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:2 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `CdpTreasury::DebitPool` (r:1 w:1)
	// Proof: `CdpTreasury::DebitPool` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	// Storage: `Rewards::SharesAndWithdrawnRewards` (r:1 w:1)
	// Proof: `Rewards::SharesAndWithdrawnRewards` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Rewards::PoolInfos` (r:1 w:1)
	// Proof: `Rewards::PoolInfos` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Loans::TotalPositions` (r:1 w:1)
	// Proof: `Loans::TotalPositions` (`max_values`: None, `max_size`: Some(83), added: 2558, mode: `MaxEncodedLen`)
	fn settle() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2771`
		//  Estimated: `6236`
		// Minimum execution time: 114_196 nanoseconds.
		Weight::from_parts(116_406_000, 6236)
			.saturating_add(T::DbWeight::get().reads(14))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	// Storage: `CdpEngine::LiquidationContracts` (r:1 w:1)
	// Proof: `CdpEngine::LiquidationContracts` (`max_values`: Some(1), `max_size`: Some(201), added: 696, mode: `MaxEncodedLen`)
	fn register_liquidation_contract() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1205`
		//  Estimated: `1686`
		// Minimum execution time: 18_253 nanoseconds.
		Weight::from_parts(18_814_000, 1686)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: `CdpEngine::LiquidationContracts` (r:1 w:1)
	// Proof: `CdpEngine::LiquidationContracts` (`max_values`: Some(1), `max_size`: Some(201), added: 696, mode: `MaxEncodedLen`)
	fn deregister_liquidation_contract() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1250`
		//  Estimated: `1686`
		// Minimum execution time: 19_302 nanoseconds.
		Weight::from_parts(19_802_000, 1686)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
