// This file is part of Acala.

// Copyright (C) 2020-2022 Acala Foundation.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for nutsfinance_stable_asset
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-11-28, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `cae23a5654f3`, CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("acala-dev"), DB CACHE: 1024

// Executed Command:
// target/production/acala
// benchmark
// pallet
// --chain=acala-dev
// --steps=50
// --repeat=20
// --pallet=*
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./templates/runtime-weight-template.hbs
// --output=./runtime/acala/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for nutsfinance_stable_asset.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> nutsfinance_stable_asset::WeightInfo for WeightInfo<T> {
	// Storage: StableAsset PoolCount (r:1 w:1)
	// Storage: StableAsset Pools (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn create_pool() -> Weight {
		// Minimum execution time: 28_123 nanoseconds.
		Weight::from_ref_time(28_557_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: StableAsset Pools (r:1 w:1)
	fn modify_a() -> Weight {
		// Minimum execution time: 21_313 nanoseconds.
		Weight::from_ref_time(22_223_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: StableAsset Pools (r:1 w:1)
	fn modify_fees() -> Weight {
		// Minimum execution time: 20_442 nanoseconds.
		Weight::from_ref_time(21_313_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: StableAsset Pools (r:1 w:1)
	fn modify_recipients() -> Weight {
		// Minimum execution time: 20_715 nanoseconds.
		Weight::from_ref_time(21_310_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: StableAsset Pools (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: Tokens Accounts (r:4 w:4)
	// Storage: AssetRegistry AssetMetadatas (r:1 w:0)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Storage: Homa TotalStakingBonded (r:1 w:0)
	// Storage: Homa ToBondPool (r:1 w:0)
	// Storage: Homa TotalVoidLiquid (r:1 w:0)
	/// The range of component `u` is `[2, 5]`.
	fn mint(u: u32, ) -> Weight {
		// Minimum execution time: 131_336 nanoseconds.
		Weight::from_ref_time(54_073_872)
			// Standard Error: 344_387
			.saturating_add(Weight::from_ref_time(43_091_850).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(u.into())))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(u.into())))
	}
	// Storage: StableAsset Pools (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Tokens Accounts (r:3 w:3)
	// Storage: AssetRegistry AssetMetadatas (r:1 w:0)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Storage: Homa TotalStakingBonded (r:1 w:0)
	// Storage: Homa ToBondPool (r:1 w:0)
	// Storage: Homa TotalVoidLiquid (r:1 w:0)
	/// The range of component `u` is `[2, 5]`.
	fn swap(u: u32, ) -> Weight {
		// Minimum execution time: 1_495_984 nanoseconds.
		Weight::from_ref_time(134_560_504)
			// Standard Error: 4_736_919
			.saturating_add(Weight::from_ref_time(729_894_854).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(u.into())))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: StableAsset Pools (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Tokens Accounts (r:4 w:4)
	// Storage: AssetRegistry AssetMetadatas (r:1 w:0)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Storage: Homa TotalStakingBonded (r:1 w:0)
	// Storage: Homa ToBondPool (r:1 w:0)
	// Storage: Homa TotalVoidLiquid (r:1 w:0)
	/// The range of component `u` is `[2, 5]`.
	fn redeem_proportion(u: u32, ) -> Weight {
		// Minimum execution time: 149_744 nanoseconds.
		Weight::from_ref_time(83_575_755)
			// Standard Error: 230_903
			.saturating_add(Weight::from_ref_time(37_177_573).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(u.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(u.into())))
	}
	// Storage: StableAsset Pools (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Tokens Accounts (r:1 w:0)
	// Storage: Homa TotalStakingBonded (r:1 w:0)
	// Storage: Homa ToBondPool (r:1 w:0)
	// Storage: Tokens TotalIssuance (r:1 w:0)
	// Storage: Homa TotalVoidLiquid (r:1 w:0)
	/// The range of component `u` is `[2, 5]`.
	fn redeem_single(u: u32, ) -> Weight {
		// Minimum execution time: 1_010_129 nanoseconds.
		Weight::from_ref_time(505_980_160)
			// Standard Error: 780_619
			.saturating_add(Weight::from_ref_time(258_570_018).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(u.into())))
	}
	// Storage: StableAsset Pools (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Tokens Accounts (r:4 w:4)
	// Storage: AssetRegistry AssetMetadatas (r:1 w:0)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Storage: Homa TotalStakingBonded (r:1 w:0)
	// Storage: Homa ToBondPool (r:1 w:0)
	// Storage: Homa TotalVoidLiquid (r:1 w:0)
	/// The range of component `u` is `[2, 5]`.
	fn redeem_multi(u: u32, ) -> Weight {
		// Minimum execution time: 130_009 nanoseconds.
		Weight::from_ref_time(47_457_211)
			// Standard Error: 421_762
			.saturating_add(Weight::from_ref_time(46_126_769).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(u.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(u.into())))
	}
}
