// This file is part of Acala.

// Copyright (C) 2020-2023 Acala Foundation.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for module_collator_selection
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-15, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ip-172-31-46-101`, CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("acala-dev"), DB CACHE: 1024

// Executed Command:
// target/production/acala
// benchmark
// pallet
// --chain=acala-dev
// --steps=50
// --repeat=20
// --pallet=*
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./templates/runtime-weight-template.hbs
// --output=./runtime/acala/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for module_collator_selection.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> module_collator_selection::WeightInfo for WeightInfo<T> {
	// Storage: CollatorSelection Invulnerables (r:0 w:1)
	// Proof: CollatorSelection Invulnerables (max_values: Some(1), max_size: Some(321), added: 816, mode: MaxEncodedLen)
	/// The range of component `b` is `[1, 10]`.
	fn set_invulnerables(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `963`
		//  Estimated: `0`
		// Minimum execution time: 15_808 nanoseconds.
		Weight::from_parts(16_399_028, 0)
			// Standard Error: 2_881
			.saturating_add(Weight::from_parts(95_549, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: CollatorSelection DesiredCandidates (r:0 w:1)
	// Proof: CollatorSelection DesiredCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn set_desired_candidates() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `963`
		//  Estimated: `0`
		// Minimum execution time: 15_003 nanoseconds.
		Weight::from_parts(15_575_000, 0)
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: CollatorSelection CandidacyBond (r:0 w:1)
	// Proof: CollatorSelection CandidacyBond (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn set_candidacy_bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `963`
		//  Estimated: `0`
		// Minimum execution time: 15_454 nanoseconds.
		Weight::from_parts(15_936_000, 0)
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: CollatorSelection NonCandidates (r:1 w:1)
	// Proof: CollatorSelection NonCandidates (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	// Storage: CollatorSelection CandidacyBond (r:1 w:0)
	// Proof: CollatorSelection CandidacyBond (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: CollatorSelection Candidates (r:1 w:1)
	// Proof: CollatorSelection Candidates (max_values: Some(1), max_size: Some(1601), added: 2096, mode: MaxEncodedLen)
	// Storage: CollatorSelection DesiredCandidates (r:1 w:0)
	// Proof: CollatorSelection DesiredCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: CollatorSelection Invulnerables (r:1 w:0)
	// Proof: CollatorSelection Invulnerables (max_values: Some(1), max_size: Some(321), added: 816, mode: MaxEncodedLen)
	// Storage: Session NextKeys (r:1 w:0)
	// Proof Skipped: Session NextKeys (max_values: None, max_size: None, mode: Measured)
	// Storage: Balances Reserves (r:1 w:1)
	// Proof: Balances Reserves (max_values: None, max_size: Some(168), added: 2643, mode: MaxEncodedLen)
	/// The range of component `c` is `[5, 50]`.
	fn register_as_candidate(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2258 + c * (60 ±0)`
		//  Estimated: `20693 + c * (61 ±0)`
		// Minimum execution time: 59_721 nanoseconds.
		Weight::from_parts(61_760_146, 20693)
			// Standard Error: 3_982
			.saturating_add(Weight::from_parts(483_747, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 61).saturating_mul(c.into()))
	}
	// Storage: CollatorSelection Candidates (r:1 w:1)
	// Proof: CollatorSelection Candidates (max_values: Some(1), max_size: Some(1601), added: 2096, mode: MaxEncodedLen)
	// Storage: CollatorSelection DesiredCandidates (r:1 w:0)
	// Proof: CollatorSelection DesiredCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: CollatorSelection Invulnerables (r:1 w:0)
	// Proof: CollatorSelection Invulnerables (max_values: Some(1), max_size: Some(321), added: 816, mode: MaxEncodedLen)
	// Storage: Session NextKeys (r:1 w:0)
	// Proof Skipped: Session NextKeys (max_values: None, max_size: None, mode: Measured)
	// Storage: Balances Reserves (r:1 w:0)
	// Proof: Balances Reserves (max_values: None, max_size: Some(168), added: 2643, mode: MaxEncodedLen)
	/// The range of component `c` is `[1, 50]`.
	fn register_candidate(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1771 + c * (55 ±0)`
		//  Estimated: `15242 + c * (55 ±0)`
		// Minimum execution time: 36_526 nanoseconds.
		Weight::from_parts(42_434_981, 15242)
			// Standard Error: 4_502
			.saturating_add(Weight::from_parts(436_647, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 55).saturating_mul(c.into()))
	}
	// Storage: CollatorSelection Candidates (r:1 w:1)
	// Proof: CollatorSelection Candidates (max_values: Some(1), max_size: Some(1601), added: 2096, mode: MaxEncodedLen)
	// Storage: Session CurrentIndex (r:1 w:0)
	// Proof Skipped: Session CurrentIndex (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: CollatorSelection NonCandidates (r:0 w:1)
	// Proof: CollatorSelection NonCandidates (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	/// The range of component `c` is `[6, 50]`.
	fn leave_intent(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1561 + c * (39 ±0)`
		//  Estimated: `6128 + c * (39 ±0)`
		// Minimum execution time: 29_479 nanoseconds.
		Weight::from_parts(29_999_297, 6128)
			// Standard Error: 2_683
			.saturating_add(Weight::from_parts(322_674, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 39).saturating_mul(c.into()))
	}
	// Storage: CollatorSelection NonCandidates (r:1 w:1)
	// Proof: CollatorSelection NonCandidates (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	// Storage: Session CurrentIndex (r:1 w:0)
	// Proof Skipped: Session CurrentIndex (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Balances Reserves (r:1 w:1)
	// Proof: Balances Reserves (max_values: None, max_size: Some(168), added: 2643, mode: MaxEncodedLen)
	fn withdraw_bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3124`
		//  Estimated: `11751`
		// Minimum execution time: 58_104 nanoseconds.
		Weight::from_parts(60_410_000, 11751)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: CollatorSelection SessionPoints (r:1 w:0)
	// Proof: CollatorSelection SessionPoints (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	fn note_author() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1888`
		//  Estimated: `9705`
		// Minimum execution time: 44_113 nanoseconds.
		Weight::from_parts(44_986_000, 9705)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: CollatorSelection Candidates (r:1 w:0)
	// Proof: CollatorSelection Candidates (max_values: Some(1), max_size: Some(1601), added: 2096, mode: MaxEncodedLen)
	// Storage: CollatorSelection Invulnerables (r:1 w:0)
	// Proof: CollatorSelection Invulnerables (max_values: Some(1), max_size: Some(321), added: 816, mode: MaxEncodedLen)
	fn new_session() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2653`
		//  Estimated: `4892`
		// Minimum execution time: 25_566 nanoseconds.
		Weight::from_parts(27_299_000, 4892)
			.saturating_add(T::DbWeight::get().reads(2))
	}
	// Storage: Session Validators (r:1 w:0)
	// Proof Skipped: Session Validators (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: CollatorSelection Candidates (r:1 w:0)
	// Proof: CollatorSelection Candidates (max_values: Some(1), max_size: Some(1601), added: 2096, mode: MaxEncodedLen)
	// Storage: CollatorSelection SessionPoints (r:0 w:50)
	// Proof: CollatorSelection SessionPoints (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	/// The range of component `r` is `[5, 50]`.
	/// The range of component `c` is `[5, 50]`.
	fn start_session(r: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1341 + c * (64 ±0)`
		//  Estimated: `5912 + c * (64 ±0)`
		// Minimum execution time: 22_124 nanoseconds.
		Weight::from_parts(17_586_437, 5912)
			// Standard Error: 1_720
			.saturating_add(Weight::from_parts(1_385, 0).saturating_mul(r.into()))
			// Standard Error: 1_720
			.saturating_add(Weight::from_parts(1_247_946, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 64).saturating_mul(c.into()))
	}
	// Storage: CollatorSelection SessionPoints (r:51 w:50)
	// Proof: CollatorSelection SessionPoints (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	// Storage: CollatorSelection Candidates (r:1 w:1)
	// Proof: CollatorSelection Candidates (max_values: Some(1), max_size: Some(1601), added: 2096, mode: MaxEncodedLen)
	// Storage: Session CurrentIndex (r:1 w:0)
	// Proof Skipped: Session CurrentIndex (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: CollatorSelection NonCandidates (r:0 w:1)
	// Proof: CollatorSelection NonCandidates (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	/// The range of component `r` is `[5, 50]`.
	/// The range of component `c` is `[5, 50]`.
	fn end_session(_r: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3391 + c * (49 ±0)`
		//  Estimated: `3513 + c * (2728 ±0)`
		// Minimum execution time: 34_376 nanoseconds.
		Weight::from_parts(516_268_739, 3513)
			// Standard Error: 20_617
			.saturating_add(Weight::from_parts(4_411_697, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(50))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2728).saturating_mul(c.into()))
	}
}
